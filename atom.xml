<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>远行&#39;s Blog</title>
  
  <subtitle>STEP BY STEP</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiaopengcheng.top/"/>
  <updated>2019-12-20T17:17:09.549Z</updated>
  <id>http://xiaopengcheng.top/</id>
  
  <author>
    <name>远行</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity3D代码规范</title>
    <link href="http://xiaopengcheng.top/2018/12/19/Unity3D%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://xiaopengcheng.top/2018/12/19/Unity3D%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</id>
    <published>2018-12-19T09:15:51.000Z</published>
    <updated>2019-12-20T17:17:09.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><h3 id="排版约定"><a href="#排版约定" class="headerlink" title="排版约定"></a>排版约定</h3><ol><li>字段：私有字段、受保护字段（尽量不要使用公有字段）</li><li>属性：私有属性、受保护属性、公有属性</li><li>事件：私有事件、受保护事件、公有事件</li><li>构造函数：参数数量最少的构造函数，参数数量中等的构造函数，参数数量最多的构造函数</li><li>方法：重载方法的排列顺序与构造函数相同，从参数数量最少往下至参数最多。方法按照功能分块即可，不需要按照私有、保护、公有分布。</li></ol><h3 id="命名的基本约定"><a href="#命名的基本约定" class="headerlink" title="命名的基本约定"></a>命名的基本约定</h3><h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h4><p>尽量不要缩写名字，名字长没关系，尽可能描述清楚。</p><h4 id="命名方法"><a href="#命名方法" class="headerlink" title="命名方法"></a>命名方法</h4><p>命名采用驼峰规则，不采用下划线分割规则。</p><ol><li>Pascal命名法：每个单词首字母大写。</li><li>Camel命名法：第一个单词首字母小写，其余单词首字母大写。</li></ol><h4 id="类型前缀"><a href="#类型前缀" class="headerlink" title="类型前缀"></a>类型前缀</h4><ol><li>不管是类型还是变量等，都不要加类型前缀。比如CButton，直接写成Button。</li><li>变量名前一般不用加类型前缀。比如int nNum，直接写成int num即可。</li></ol><h4 id="文件夹命名"><a href="#文件夹命名" class="headerlink" title="文件夹命名"></a>文件夹命名</h4><p>Unity工程中所有C#代码的文件夹命名，都必须使用英文全拼，遵循Pascal大小写规范。</p><h4 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h4><p>所有的C#源代码文件，命名都使用英文全拼，都必须遵循Pascal大小写规范。</p><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><ol><li>使用Pascal命名法</li><li>命名空间采用XXGame开头，比如XXGameEngine。</li></ol><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><ol><li>使用Pascal命名法。</li><li>类名要用名词。模板类开头用T。</li></ol><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><ol><li>使用Pascal命名法。</li><li>接口开头用I。接口名要用名词。</li></ol><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><ol><li>枚举类型和枚举常量都使用Pascal命名法。</li><li>不需要在类型或者枚举常量的前后加上Enum前缀。</li></ol><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><ol><li>使用Pascal命名法。</li><li>函数名最好用动词开头。</li></ol><h4 id="委托和事件"><a href="#委托和事件" class="headerlink" title="委托和事件"></a>委托和事件</h4><ol><li>使用Pascal命名法。</li><li>使用动词短语命名。</li></ol><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ol><li>使用Pascal命名法。</li></ol><h4 id="特性-Attribute"><a href="#特性-Attribute" class="headerlink" title="特性(Attribute)"></a>特性(Attribute)</h4><ol><li>用名词或名词短语+Attribute方式命名特性，保证特性名清晰，尽量达到望文生义的境界。</li><li>采用Pascal方式命名，尽量少用或不用缩写，若使用了缩写一定要在注释中详细注明特性的用途。</li></ol><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ol><li>使用Camel命名法。</li><li>类非静态成员变量用m开头。</li><li>类的静态成员变量用s开头。函数内的静态变量需用s开头。</li><li>类的公有成员变量大写开头，不需要加前缀，尽量用属性代替公有变量。</li></ol><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ol><li>所有单词大写，多个单词之间用下划线隔开，比如public const int PAGE_INDEX = 6;</li></ol><h3 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h3><ol><li>大括号各占一行对齐，而不是将左大括号放在行尾。</li><li>代码缩进使用Tab键实现，最好不要使用空格，为保证在不同机器上使代码缩进保持一致，设置Tab键宽度为4个字符。</li><li>if、while、for等关键词后应有一个空格［eg. “if (a == b)”］</li><li>运算符前后应各有一个空格［eg. “a = b + c;”］</li></ol><h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><h4 id="行长度"><a href="#行长度" class="headerlink" title="行长度"></a>行长度</h4><p>每一行代码的行长度，建议 不要超过110个字符。如果超过这个长度，可以按照以下规则换行：</p><ol><li>在逗号后换行。</li><li>在操作符前换行。</li><li>第一条优先于第二条。</li></ol><h4 id="函数长度"><a href="#函数长度" class="headerlink" title="函数长度"></a>函数长度</h4><p>建议单个函数长度不要超过80行。越简短越好。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol><li>尽量少写注释，做到代码自解释。</li><li>尽量用最简单直接的代码实现功能，减少冗余的代码。</li><li>逻辑复杂的地方加上关键注释即可。</li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">YZGameEngine</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Game</span></span><br><span class="line">    &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">string</span> mName;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">string</span> Name</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span> </span><br><span class="line">                &#123; </span><br><span class="line">                    <span class="keyword">return</span> Name;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sNum;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> Type;</span><br><span class="line">            </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">InitGame</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                mName = name;</span><br><span class="line">                <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">                sNum = num;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="防御性编程"><a href="#防御性编程" class="headerlink" title="防御性编程"></a>防御性编程</h2><h3 id="安全编程"><a href="#安全编程" class="headerlink" title="安全编程"></a>安全编程</h3><ol><li>对象使用前必须判空引用，尤其函数参数或者函数调用或者集合返回的对象，使用前必须判空。</li><li>尽可能避免使用异常，通过其它方式避免出现错误或者异常，比如代码逻辑保证或者返回值判断。</li></ol><h3 id="性能编程"><a href="#性能编程" class="headerlink" title="性能编程"></a>性能编程</h3><h4 id="预计算"><a href="#预计算" class="headerlink" title="预计算"></a>预计算</h4><ol><li>UI控件必须在初始化的时候通过find获得，而不是在使用的时候频繁获得。</li><li>不要频繁使用GetComponent获得组件，可以在初始化时候缓存引用。</li></ol><h4 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h4><ol><li>尽可能不要使用foreach。</li><li>避免重复使用string，因为C#中的string是定长并分配在堆上的，每次赋值都会重新创建一个新的string，可以使用StringBuilder来构建字符串。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命名规则&quot;&gt;&lt;a href=&quot;#命名规则&quot; class=&quot;headerlink&quot; title=&quot;命名规则&quot;&gt;&lt;/a&gt;命名规则&lt;/h2&gt;&lt;h3 id=&quot;排版约定&quot;&gt;&lt;a href=&quot;#排版约定&quot; class=&quot;headerlink&quot; title=&quot;排版约定&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="Unity3d" scheme="http://xiaopengcheng.top/categories/Unity3d/"/>
    
    
      <category term="Unity3D" scheme="http://xiaopengcheng.top/tags/Unity3D/"/>
    
      <category term="代码规范" scheme="http://xiaopengcheng.top/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>NGUI概述</title>
    <link href="http://xiaopengcheng.top/2017/01/12/NGUI%E6%A6%82%E8%BF%B0/"/>
    <id>http://xiaopengcheng.top/2017/01/12/NGUI%E6%A6%82%E8%BF%B0/</id>
    <published>2017-01-12T09:15:51.000Z</published>
    <updated>2019-12-20T17:16:52.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NGUI介绍"><a href="#NGUI介绍" class="headerlink" title="NGUI介绍"></a>NGUI介绍</h2><p>NGUI是Unity中最流行的UI插件，在UGUI出现前几乎是Unity唯一的UI解决方案。<br>NGUI是一个提供高效事件通知框架的强大UI系统。NGUI遵循<a href="https://en.wikipedia.org/wiki/KISS_principle" target="_blank" rel="noopener">Kiss准则</a>，其中类代码简洁，多数在200行以内。程序员可以方便的扩展其组件类代码以获得定制的功能。<br><a href="http://www.tasharen.com/?page_id=140" target="_blank" rel="noopener">NGUI官方网址</a><br><a href="http://www.tasharen.com/forum/index.php?board=12.0" target="_blank" rel="noopener">NGUI官方文档地址</a></p><h2 id="NGUI下载"><a href="#NGUI下载" class="headerlink" title="NGUI下载"></a>NGUI下载</h2><p>我们可以从unity商店购买NGUI，或者下载其免费版本。<br><a href="https://www.assetstore.unity3d.com/cn/#!/content/2413" target="_blank" rel="noopener">NGUI的Unity商店</a><br>当然也可以下载网上其它人提供的版本学习研究。<br><a href="http://www.ceeger.com/forum/read.php?tid=20718fid=16" target="_blank" rel="noopener">NGUI 3.10.2</a></p><h2 id="NGUI导入"><a href="#NGUI导入" class="headerlink" title="NGUI导入"></a>NGUI导入</h2><p>下载NGUI后，我们得到的是一个.unitypackage文件，比如NGUI Next-Gen UI v3.6.8.unitypackage。<br>Unity编辑器中，打开菜单Assets-&gt;ImportPackage-&gt;CustomPackage，然后选择下载的.unitypackage文件导入编辑器。导入NGUI后，在工程的Assets目录下会出现一个NGUI文件夹，并且Unity编辑器中会多了一个NGUI主菜单。</p><h2 id="NGUI例子"><a href="#NGUI例子" class="headerlink" title="NGUI例子"></a>NGUI例子</h2><p>打开NGUI-&gt;Options-&gt;Reset Prefab ToolBar，会出现如下工具条：</p><p><img src="https://c1.staticflickr.com/1/782/31420422424_657c6cee61_o.png" alt="NGUI例子"><br>这里面有基本的NGUI控件例子，是我们学习参照的好材料。</p><h2 id="NGUI类图"><a href="#NGUI类图" class="headerlink" title="NGUI类图"></a>NGUI类图</h2><p>下面是我整理的NGUI类图：<br><img src="https://c1.staticflickr.com/1/363/32223724406_7e07b90f4b_o.png" alt="NGUI类图"></p><p>该类图中列出了NGUI中绝大部分的类。<br>类图中有两个最重要的分支，UIWidgetContainer分支和UIWidget分支。<br>NGUI中的大部分控件都继承自UIWidgetContainer，这说明在NGUI中，其实是把控件当作Sprite的容器而已。UIWidget的子类就是Sprite和Texture，表示NGUI中的控件都是图片化的，控件的表现都依赖图片。</p><h2 id="NGUI常用组件"><a href="#NGUI常用组件" class="headerlink" title="NGUI常用组件"></a>NGUI常用组件</h2><h3 id="UILabel-文本"><a href="#UILabel-文本" class="headerlink" title="UILabel 文本"></a>UILabel 文本</h3><h3 id="UIInput-输入框"><a href="#UIInput-输入框" class="headerlink" title="UIInput 输入框"></a>UIInput 输入框</h3><h3 id="UITextList-多文本显示框，类似聊天窗"><a href="#UITextList-多文本显示框，类似聊天窗" class="headerlink" title="UITextList 多文本显示框，类似聊天窗"></a>UITextList 多文本显示框，类似聊天窗</h3><h3 id="UISprite-图片精灵"><a href="#UISprite-图片精灵" class="headerlink" title="UISprite 图片精灵"></a>UISprite 图片精灵</h3><h3 id="UIBotton-按钮"><a href="#UIBotton-按钮" class="headerlink" title="UIBotton 按钮"></a>UIBotton 按钮</h3><h3 id="UIToggle-单选框-复选框"><a href="#UIToggle-单选框-复选框" class="headerlink" title="UIToggle 单选框/复选框"></a>UIToggle 单选框/复选框</h3><h3 id="UIScrollBar-滚动条"><a href="#UIScrollBar-滚动条" class="headerlink" title="UIScrollBar 滚动条"></a>UIScrollBar 滚动条</h3><h3 id="UISlider-滑动条-进度条"><a href="#UISlider-滑动条-进度条" class="headerlink" title="UISlider 滑动条/进度条"></a>UISlider 滑动条/进度条</h3><h3 id="UIProgressBar-进度条"><a href="#UIProgressBar-进度条" class="headerlink" title="UIProgressBar 进度条"></a>UIProgressBar 进度条</h3><h3 id="UIPopupList-下拉框"><a href="#UIPopupList-下拉框" class="headerlink" title="UIPopupList 下拉框"></a>UIPopupList 下拉框</h3><h3 id="UIGrid-将子控件按照单元格布局"><a href="#UIGrid-将子控件按照单元格布局" class="headerlink" title="UIGrid 将子控件按照单元格布局"></a>UIGrid 将子控件按照单元格布局</h3><h3 id="UITable-UIGrid加强版，类似Html的table"><a href="#UITable-UIGrid加强版，类似Html的table" class="headerlink" title="UITable UIGrid加强版，类似Html的table"></a>UITable UIGrid加强版，类似Html的table</h3><h3 id="UIPanel-控件渲染器，管理和绘制其下所有的组件"><a href="#UIPanel-控件渲染器，管理和绘制其下所有的组件" class="headerlink" title="UIPanel 控件渲染器，管理和绘制其下所有的组件"></a>UIPanel 控件渲染器，管理和绘制其下所有的组件</h3><h3 id="UIScrollView-滚动视窗"><a href="#UIScrollView-滚动视窗" class="headerlink" title="UIScrollView 滚动视窗"></a>UIScrollView 滚动视窗</h3><h3 id="UIKeyBinding-给控件的点击或者选中事情绑定按键"><a href="#UIKeyBinding-给控件的点击或者选中事情绑定按键" class="headerlink" title="UIKeyBinding 给控件的点击或者选中事情绑定按键"></a>UIKeyBinding 给控件的点击或者选中事情绑定按键</h3><h3 id="UIRoot-NGUI的UI根物体"><a href="#UIRoot-NGUI的UI根物体" class="headerlink" title="UIRoot NGUI的UI根物体"></a>UIRoot NGUI的UI根物体</h3><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://www.tasharen.com/forum/index.php?topic=6754" target="_blank" rel="noopener">NGUI官网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;NGUI介绍&quot;&gt;&lt;a href=&quot;#NGUI介绍&quot; class=&quot;headerlink&quot; title=&quot;NGUI介绍&quot;&gt;&lt;/a&gt;NGUI介绍&lt;/h2&gt;&lt;p&gt;NGUI是Unity中最流行的UI插件，在UGUI出现前几乎是Unity唯一的UI解决方案。&lt;br&gt;NGUI
      
    
    </summary>
    
    
      <category term="Unity3d" scheme="http://xiaopengcheng.top/categories/Unity3d/"/>
    
    
      <category term="NGUI" scheme="http://xiaopengcheng.top/tags/NGUI/"/>
    
      <category term="Unity3D" scheme="http://xiaopengcheng.top/tags/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title>WebGL编程模型</title>
    <link href="http://xiaopengcheng.top/2016/12/25/WebGL%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    <id>http://xiaopengcheng.top/2016/12/25/WebGL%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/</id>
    <published>2016-12-25T10:16:11.000Z</published>
    <updated>2019-12-19T18:08:58.709Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍编写一个原生的WebGL程序需要哪些步骤。</p><h2 id="WebGL程序的软件结构"><a href="#WebGL程序的软件结构" class="headerlink" title="WebGL程序的软件结构"></a>WebGL程序的软件结构</h2><p>默认情况下，一个动态网页程序只包括HTML和JavaScript两种语言。<br>而在WebGL程序中，还包括了第三种语言：GLSL ES。</p><p><img src="https://c1.staticflickr.com/1/417/31743655591_e5815e1579_o.png" alt="enter description here"></p><h2 id="WebGL编程模型"><a href="#WebGL编程模型" class="headerlink" title="WebGL编程模型"></a>WebGL编程模型</h2><p><img src="https://c1.staticflickr.com/1/502/31050538443_ca9377f3a2_o.png" alt="enter description here"><br>上图表示一个WebGL程序运行的主要流程。主要分为3个阶段，应用程序阶段、着色器阶段、片元后处理阶段。<br>本文接下来按照一定的规律介绍编写一个原生WebGL程序主要的步骤。</p><h3 id="获得WebGL渲染环境"><a href="#获得WebGL渲染环境" class="headerlink" title="获得WebGL渲染环境"></a>获得WebGL渲染环境</h3><h4 id="在Html中定义canvas标签"><a href="#在Html中定义canvas标签" class="headerlink" title="在Html中定义canvas标签"></a>在Html中定义canvas标签</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">canvas</span> id=<span class="string">"webgl"</span> <span class="attribute">width</span>=<span class="string">"400"</span> height=<span class="string">"400"</span>&gt; &lt;/canvas&gt;</span><br></pre></td></tr></table></figure><h4 id="在JS代码中获得canvas对象"><a href="#在JS代码中获得canvas对象" class="headerlink" title="在JS代码中获得canvas对象"></a>在JS代码中获得canvas对象</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var canvas = document.getElementById('webgl');</span><br></pre></td></tr></table></figure><h4 id="通过canvas对象获得WebGL渲染环境"><a href="#通过canvas对象获得WebGL渲染环境" class="headerlink" title="通过canvas对象获得WebGL渲染环境"></a>通过canvas对象获得WebGL渲染环境</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var gl = getWebGLContext(canvas);</span><br></pre></td></tr></table></figure><h3 id="编写着色器"><a href="#编写着色器" class="headerlink" title="编写着色器"></a>编写着色器</h3><h4 id="编写顶点着色器"><a href="#编写顶点着色器" class="headerlink" title="编写顶点着色器"></a>编写顶点着色器</h4><p>顶点着色器是用来描述顶点属性（比如位置、颜色、纹理坐标等的程序）<br><img src="https://c1.staticflickr.com/1/441/31822594876_583f762171_o.png" alt="enter description here"></p><h4 id="编写片元着色器"><a href="#编写片元着色器" class="headerlink" title="编写片元着色器"></a>编写片元着色器</h4><p>片元着色器处理光栅后的数据，可以片元将其理解为像素。<br>片元着色器的输出构成了最终的像素值（开启多重采样的话只构成了某个像素的一部分值）<br><img src="https://c1.staticflickr.com/1/771/31822601086_e8b7848d25_o.png" alt="enter description here"></p><h3 id="初始化着色器"><a href="#初始化着色器" class="headerlink" title="初始化着色器"></a>初始化着色器</h3><p>初始化着色器基本上是一个固定的流程，主要分为以下几个步骤。</p><h4 id="创建shader"><a href="#创建shader" class="headerlink" title="创建shader"></a>创建shader</h4><h4 id="加载shader源码"><a href="#加载shader源码" class="headerlink" title="加载shader源码"></a>加载shader源码</h4><h4 id="编译shader"><a href="#编译shader" class="headerlink" title="编译shader"></a>编译shader</h4><h4 id="创建程序"><a href="#创建程序" class="headerlink" title="创建程序"></a>创建程序</h4><h4 id="附加编译好的shader"><a href="#附加编译好的shader" class="headerlink" title="附加编译好的shader"></a>附加编译好的shader</h4><h4 id="链接程序"><a href="#链接程序" class="headerlink" title="链接程序"></a>链接程序</h4><h4 id="使用程序"><a href="#使用程序" class="headerlink" title="使用程序"></a>使用程序</h4><h3 id="获得顶点属性"><a href="#获得顶点属性" class="headerlink" title="获得顶点属性"></a>获得顶点属性</h3><p>顶点上有各种属性，比如空间坐标、纹理坐标、材质等，一个顶点就是一个属性集合。<br>如下图所示的立方体，顶点上有2个属性，坐标和颜色。<br><img src="https://c1.staticflickr.com/1/280/31487505630_7c7a69ed2f_o.png" alt="enter description here"><br>顶点属性可以通过读取模型文件，比如obj文件等获得，或者简单写在代码定义中，比如上图的立方体。</p><h3 id="创建顶点缓冲区"><a href="#创建顶点缓冲区" class="headerlink" title="创建顶点缓冲区"></a>创建顶点缓冲区</h3><p>缓冲区存在于显存中，能够被显卡直接用来进行渲染，不需要进行数据传输。<br>在WebGL中，通过以下调用获得一个缓冲区对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var vertexColorBuffer = gl.createBuffer();</span><br></pre></td></tr></table></figure><h3 id="写入顶点数据到顶点缓冲区对象"><a href="#写入顶点数据到顶点缓冲区对象" class="headerlink" title="写入顶点数据到顶点缓冲区对象"></a>写入顶点数据到顶点缓冲区对象</h3><p>这个步骤分为两个操作。</p><h4 id="首先，绑定创建的缓冲区"><a href="#首先，绑定创建的缓冲区" class="headerlink" title="首先，绑定创建的缓冲区"></a>首先，绑定创建的缓冲区</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);</span><br></pre></td></tr></table></figure><h4 id="然后，传输系统内存中上的顶点数据到缓冲区（显存中）"><a href="#然后，传输系统内存中上的顶点数据到缓冲区（显存中）" class="headerlink" title="然后，传输系统内存中上的顶点数据到缓冲区（显存中）"></a>然后，传输系统内存中上的顶点数据到缓冲区（显存中）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br></pre></td></tr></table></figure><h4 id="传输数据的标志"><a href="#传输数据的标志" class="headerlink" title="传输数据的标志"></a>传输数据的标志</h4><p>gl.bufferData的第三个参数表示数据的使用标志，表示三种不同的应用场景。<br>1. gl.STATIC_DRAW ：表示数据不会经常改变，通常用于静态物体，比如地形、墙体等。<br>2. gl.STREAM_DRAW：表示数据使用一次后就会被丢弃。<br>3. gl.DYNAMIC_DRAW：表示数据会被多次修改，也会被使用多次。</p><p>系统会根据usage标示符为缓冲区对象分配最佳的存储位置。<br>STATIC_DRAW和STREAM_DRAW分配在显存上，DYNAMIC_DRAW可能分配在AGP中。</p><h3 id="将顶点数据传输到顶点着色器"><a href="#将顶点数据传输到顶点着色器" class="headerlink" title="将顶点数据传输到顶点着色器"></a>将顶点数据传输到顶点着色器</h3><p>目前，我们已经准会了WebGL渲染环境，并且数据已经从系统内存传输到显存中的缓冲区对象中。现在，我们要将缓存区对象中的数据指定给顶点着色器中对应的变量。<br>顶点着色器中的attribute变量对象顶点的属性。我们的顶点着色器中定义了2个变量，a_Position，a_Color。下面我们分为三步为这其指定数据。</p><ol><li><p>获得着色器中attribute变量位置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a_Position = gl.getAttribLocation(gl.program, 'a_Position');</span><br></pre></td></tr></table></figure></li><li><p>根据变量位置传入缓冲区中的顶点属性数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>启用该attribute变量的属性数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl.enableVertexAttribArray(a_Position);</span><br></pre></td></tr></table></figure></li></ol><p>对于a_Color，我们在系统内存中定义在坐标的后面，因此在第2步中需要进行<strong>偏移</strong>，gl.vertexAttribPointer的最后一个参数可以指定数据的偏移位置，因此第2步修改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, FSIZE * <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>FSIZE表示float的大小。</p><h3 id="传入uniform变量到着色器"><a href="#传入uniform变量到着色器" class="headerlink" title="传入uniform变量到着色器"></a>传入uniform变量到着色器</h3><p>着色器中还存在一种uniform变量，这种变量对于所有顶点来说都是一样的。<br>比如，mvp矩阵就应该定义为uniform变量。一般情况，我们在js代码中计算好mvp矩阵，然后传输到着色器中的uniform变量中。主要步骤如下：<br>1. 获取uniform变量的在着色中的位置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var u_MvpMatrix = gl.getUniformLocation(gl.program, 'u_MvpMatrix');</span><br></pre></td></tr></table></figure><ol><li>计算uniform变量（比如mvp矩阵）的值</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">mvpMatrix.setPerspective(<span class="number">30</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">mvpMatrix.lookAt(<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><ol><li>传入uniform变量</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, mvpMatrix.elements);</span><br></pre></td></tr></table></figure><p>目前，顶点着色器已经有了每个顶点的属性，以及用uniform变量表示的mvp矩阵，因此可以变换顶点属性后传入片元着色器中进一步处理。</p><h3 id="定义面片索引"><a href="#定义面片索引" class="headerlink" title="定义面片索引"></a>定义面片索引</h3><p>上面我们处理的数据都是顶点属性，但是我们实际要绘制的图元是面片，比如三角面片。<br>通常情况下，我们会用三个顶点索引表示一个三角面片。<br>如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Indices of the vertices</span></span><br><span class="line">var indices = <span class="keyword">new</span> Uint8Array([</span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="comment">// front</span></span><br><span class="line"><span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="comment">// right</span></span><br><span class="line"><span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="comment">// up</span></span><br><span class="line"><span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="comment">// left</span></span><br><span class="line"><span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="comment">// down</span></span><br><span class="line"><span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span> <span class="comment">// back</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>indices表示一个立方体的面片索引。</p><h3 id="创建索引缓冲区，写入索引"><a href="#创建索引缓冲区，写入索引" class="headerlink" title="创建索引缓冲区，写入索引"></a>创建索引缓冲区，写入索引</h3><p>接下来，我们要创建索引缓冲区，并将内存中的索引数据传入缓存区。<br>1. 创建索引缓冲区</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var indexBuffer = gl.createBuffer();</span><br></pre></td></tr></table></figure><ol><li>绑定索引缓冲区</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);</span><br></pre></td></tr></table></figure><ol><li>将面片索引写入缓冲区对象</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);</span><br></pre></td></tr></table></figure><h3 id="根据索引绘制图元"><a href="#根据索引绘制图元" class="headerlink" title="根据索引绘制图元"></a>根据索引绘制图元</h3><p>最后一步只需要根据面片索引绘制图元即可。<br>根据面片的顶点索引绘制图元节省内存，不需要存储重复的顶点数据。<br>我们只需要调用gl.drawElements即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>其中，第二个参数n表示要绘制的图元（三角形面片）个数。最后一个参数0表示使用已经绑定好的索引缓冲区对象。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>下面给出绘制一个彩色立方体的完整代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vertex shader program</span></span><br><span class="line">var VSHADER_SOURCE =</span><br><span class="line">'attribute vec4 a_Position;\n' +</span><br><span class="line">'attribute vec4 a_Color;\n' +</span><br><span class="line">'uniform mat4 u_MvpMatrix;\n' +</span><br><span class="line">'varying vec4 v_Color;\n' +</span><br><span class="line">'void main() &#123;\n' +</span><br><span class="line">' gl_Position = u_MvpMatrix * a_Position;\n' +</span><br><span class="line">' v_Color = a_Color;\n' +</span><br><span class="line">'&#125;\n';</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fragment shader program</span></span><br><span class="line">var FSHADER_SOURCE =</span><br><span class="line">'#ifdef GL_ES\n' +</span><br><span class="line">'precision mediump float;\n' +</span><br><span class="line">'#endif\n' +</span><br><span class="line">'varying vec4 v_Color;\n' +</span><br><span class="line">'void main() &#123;\n' +</span><br><span class="line">' gl_FragColor = v_Color;\n' +</span><br><span class="line">'&#125;\n';</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// Retrieve &lt;canvas&gt; element</span></span><br><span class="line">var canvas = document.getElementById('webgl');</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the rendering context for WebGL</span></span><br><span class="line">var gl = getWebGLContext(canvas);</span><br><span class="line"><span class="keyword">if</span> (!gl) &#123;</span><br><span class="line">console.log('Failed to get the rendering context for WebGL');</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize shaders</span></span><br><span class="line"><span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">console.log('Failed to intialize shaders.');</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the vertex coordinates and color</span></span><br><span class="line">var n = initVertexBuffers(gl);</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">console.log('Failed to set the vertex information');</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set clear color and enable hidden surface removal</span></span><br><span class="line">gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">gl.enable(gl.DEPTH_TEST);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the storage location of u_MvpMatrix</span></span><br><span class="line">var u_MvpMatrix = gl.getUniformLocation(gl.program, 'u_MvpMatrix');</span><br><span class="line"><span class="keyword">if</span> (!u_MvpMatrix) &#123;</span><br><span class="line">console.log('Failed to get the storage location of u_MvpMatrix');</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the eye point and the viewing volume</span></span><br><span class="line">var mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">mvpMatrix.setPerspective(<span class="number">30</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">mvpMatrix.lookAt(<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pass the model view projection matrix to u_MvpMatrix</span></span><br><span class="line">gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, mvpMatrix.elements);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Clear color and depth buffer</span></span><br><span class="line">gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Draw the cube</span></span><br><span class="line">gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">initVertexBuffers</span><span class="params">(gl)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Create a cube</span></span><br><span class="line"><span class="comment">// v6----- v5</span></span><br><span class="line"><span class="comment">// /| /|</span></span><br><span class="line"><span class="comment">// v1------v0|</span></span><br><span class="line"><span class="comment">// | | | |</span></span><br><span class="line"><span class="comment">// | |v7---|-|v4</span></span><br><span class="line"><span class="comment">// |/ |/</span></span><br><span class="line"><span class="comment">// v2------v3</span></span><br><span class="line">var verticesColors = <span class="keyword">new</span> Float32Array([</span><br><span class="line"><span class="comment">// Vertex coordinates and color</span></span><br><span class="line"><span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="comment">// v0 White</span></span><br><span class="line"><span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="comment">// v1 Magenta</span></span><br><span class="line"><span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="comment">// v2 Red</span></span><br><span class="line"><span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="comment">// v3 Yellow</span></span><br><span class="line"><span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="comment">// v4 Green</span></span><br><span class="line"><span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="comment">// v5 Cyan</span></span><br><span class="line"><span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="comment">// v6 Blue</span></span><br><span class="line"><span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span> <span class="comment">// v7 Black</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Indices of the vertices</span></span><br><span class="line">var indices = <span class="keyword">new</span> Uint8Array([</span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="comment">// front</span></span><br><span class="line"><span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="comment">// right</span></span><br><span class="line"><span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="comment">// up</span></span><br><span class="line"><span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="comment">// left</span></span><br><span class="line"><span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="comment">// down</span></span><br><span class="line"><span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span> <span class="comment">// back</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a buffer object</span></span><br><span class="line">var vertexColorBuffer = gl.createBuffer();</span><br><span class="line">var indexBuffer = gl.createBuffer();</span><br><span class="line"><span class="keyword">if</span> (!vertexColorBuffer || !indexBuffer) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write the vertex coordinates and color to the buffer object</span></span><br><span class="line">gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);</span><br><span class="line">gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">var FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line"><span class="comment">// Assign the buffer object to a_Position and enable the assignment</span></span><br><span class="line">var a_Position = gl.getAttribLocation(gl.program, 'a_Position');</span><br><span class="line"><span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>) &#123;</span><br><span class="line">console.log('Failed to get the storage location of a_Position');</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">gl.enableVertexAttribArray(a_Position);</span><br><span class="line"><span class="comment">// Assign the buffer object to a_Color and enable the assignment</span></span><br><span class="line">var a_Color = gl.getAttribLocation(gl.program, 'a_Color');</span><br><span class="line"><span class="keyword">if</span>(a_Color &lt; <span class="number">0</span>) &#123;</span><br><span class="line">console.log('Failed to get the storage location of a_Color');</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, FSIZE * <span class="number">3</span>);</span><br><span class="line">gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write the indices to the buffer object</span></span><br><span class="line">gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);</span><br><span class="line">gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> indices.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中使用到的创建WebGL渲染环境、初始化着色器、创建矩阵的操作，读者可以自行找相应的代码库替代。<br>或者在下面的链接中下载：<br><a href="http://pan.baidu.com/s/1mhVH5Ba" target="_blank" rel="noopener">WebGL Lib</a>， 密码：tncd。</p><p>PPT文档如下：</p><iframe src="https://onedrive.live.com/embed?cid=4330CD349D9ADD44&resid=4330CD349D9ADD44%21739&authkey=AF3XGkUj4jdHiF8&em=2" width="900" height="700" frameborder="0" scrolling="no"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要介绍编写一个原生的WebGL程序需要哪些步骤。&lt;/p&gt;
&lt;h2 id=&quot;WebGL程序的软件结构&quot;&gt;&lt;a href=&quot;#WebGL程序的软件结构&quot; class=&quot;headerlink&quot; title=&quot;WebGL程序的软件结构&quot;&gt;&lt;/a&gt;WebGL程序的软件结构&lt;/h
      
    
    </summary>
    
    
      <category term="图形学" scheme="http://xiaopengcheng.top/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
      <category term="WebGL" scheme="http://xiaopengcheng.top/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/WebGL/"/>
    
    
      <category term="WebGL" scheme="http://xiaopengcheng.top/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>虚幻引擎游戏命令</title>
    <link href="http://xiaopengcheng.top/2016/12/03/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E%E6%B8%B8%E6%88%8F%E5%91%BD%E4%BB%A4/"/>
    <id>http://xiaopengcheng.top/2016/12/03/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E%E6%B8%B8%E6%88%8F%E5%91%BD%E4%BB%A4/</id>
    <published>2016-12-03T14:06:24.000Z</published>
    <updated>2019-12-20T17:18:43.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令行参数和控制台命令"><a href="#命令行参数和控制台命令" class="headerlink" title="命令行参数和控制台命令"></a>命令行参数和控制台命令</h2><p>游戏命令包括两种，一种是运行游戏时候指定的命令行参数，另外一种则指的是进入游戏后输入的控制命令。</p><h2 id="控制台命令"><a href="#控制台命令" class="headerlink" title="控制台命令"></a>控制台命令</h2><p>对于虚幻三来说，控制台命令分为两种，一种是引擎中已经支持的可执行命令，这些命令都是在C++类的Exec函数中进行处理的。另一种是带exec前缀的脚本函数，称为可执行函数。<br>下面根据用途统一总结，不进行区分。</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="exit-quit"><a href="#exit-quit" class="headerlink" title="exit(quit)"></a>exit(quit)</h4><p>退出游戏</p><h4 id="pause"><a href="#pause" class="headerlink" title="pause"></a>pause</h4><p>暂停游戏，按pause break键也可以。</p><h4 id="open-url"><a href="#open-url" class="headerlink" title="open [url]"></a>open [url]</h4><p>打开地图，额外的参数同命令行参数的url部分。比如，在大厅中开始游戏就是用的该命令打开服务器下发的ip地址。</p><h4 id="restartLevel"><a href="#restartLevel" class="headerlink" title="restartLevel"></a>restartLevel</h4><p>重启当前关卡</p><h4 id="reconnect-disconnect-cancel"><a href="#reconnect-disconnect-cancel" class="headerlink" title="reconnect/disconnect/cancel"></a>reconnect/disconnect/cancel</h4><p>重新连接服务器，断开服务器连接，取消进行的服务器连接操作。</p><h4 id="Kill系列"><a href="#Kill系列" class="headerlink" title="Kill系列"></a>Kill系列</h4><ol><li>KillAll [class] - 销毁或破坏关卡中特定类的所有实例。</li><li>KillPawns - 销毁关卡中的所有 pawn。</li><li>KillBadGuys - 销毁所有不在同一个团队作为玩家的 pawns。</li><li>Suicide -玩家自杀</li></ol><h4 id="god-fly-walk"><a href="#god-fly-walk" class="headerlink" title="god/fly/walk"></a>god/fly/walk</h4><p>幽灵模式（可以飞、穿墙）/飞行模式/正常模式</p><h4 id="AllAmmo"><a href="#AllAmmo" class="headerlink" title="AllAmmo"></a>AllAmmo</h4><p>将弹药数目设置为所有武器的最大值</p><h4 id="SetRes"><a href="#SetRes" class="headerlink" title="SetRes"></a>SetRes</h4><p>setres [width] [x|X] [height] [w|f]<br>改变分辨率（width为宽，height为高）<br>模式(w = 窗口; f = 全屏)，<br>比如 800x600w表示分辨率为800乘以600的窗口模式，<br>1024x768f表示分辨率为1024乘以768的全屏模式。</p><h4 id="FreeCamera"><a href="#FreeCamera" class="headerlink" title="FreeCamera"></a>FreeCamera</h4><p>将玩家的相机设置为自由轨道相机模式（第三人称视角），FreeCamera false恢复。</p><h4 id="Addbots"><a href="#Addbots" class="headerlink" title="Addbots"></a>Addbots</h4><ol><li>AddBots [number] - 为了进行测试，会向关卡中添加指定机器人数.</li><li>AddBlueBots [number] - 在团队游戏中为蓝队添加指定的机器人数。</li><li>AddRedBots [number] - 在团队游戏中为红队添加指定的机器人数。</li><li>AddNamedBot [name] [bUseTeamNum] [teamnum] - 添加一个使用指定名称的机器人。如果 bUseTeamNum 为真而且指定了团队数，那么将该机器人添加到指定的团队。</li></ol><h4 id="Shot"><a href="#Shot" class="headerlink" title="Shot"></a>Shot</h4><ol><li>shot/screenshot 以当前的屏幕分辨率截取屏幕截图。</li><li>tiledshot [factor] 以当前分辨率乘以指定因数为分辨率来获取屏幕截图。比如，tiledshot 2会得到2乘以2的shot截图，分辨率也是shot的2倍。</li><li>SHOTNOHUD，不截屏hud。</li></ol><h3 id="渲染命令"><a href="#渲染命令" class="headerlink" title="渲染命令"></a>渲染命令</h3><h4 id="ViewMode"><a href="#ViewMode" class="headerlink" title="ViewMode"></a>ViewMode</h4><p>viewmode命令设置渲染模式<br>1. detaillight 默认模式，使用受到法线贴图的光照影响的中性色彩材质渲染场景<br>2. unlit 无光照<br>3. lightingonly 只使用光照<br>4. wireframe 线框模式<br>5. brushwireframe 线框模式，但是显示画刷边缘<br>6. lightcomplexity 显示光照复杂度<br>7. lightmapdensity 显示光照贴图密度<br>8. litlightmapdensity 显示光照贴图像素密度 6和7的结合<br>9. texturedensity 显示每个表面上漫反射通道上的贴图像素密度<br>10. shadercomplexity 显示每个表面上所应用的材质的复杂度</p><h4 id="Show"><a href="#Show" class="headerlink" title="Show"></a>Show</h4><p>切换各种项目的显示(仅用于客户端)<br>1. bounds  切换actor边界的显示（包围盒和包围球）<br>2. volumes 切换体积的显示（体积盒）<br>3. collision 切换碰撞体的显示状态<br>4. bsp  切换bsp几何体的显示（用bsp画刷制作的物体，比如墙）<br>5. fog  切换雾actors的显示<br>6. particles 切换粒子几何体的显示（比如烟雾弹，特效做的门）<br>7. paths 切换路径或导航网格物体的显示<br>8. navnodes 切换和寻路相关的actors的显示<br>9. foliage 切换植被的显示<br>10. terrain 切换地形几何体的显示<br>11. terrainpatches 切换地形块的显示。在每个块的周围描画一个轮廓。<br>12. staticmeshes 切换静态网格物体几何体的显示<br>13. decal 切换decal actors的显示<br>14. decalinfo 切换decals（贴花）的调试开发信息的显示(平头截体、切线轴等)。<br>15. staticmeshes 切换静态网格物体几何体的显示。<br>16. postprocess  切换后期处理特效的显示<br>17. skelmeshes/skeletalmeshes 切换骨架网格物体几何体的显示<br>18. MISSINGCOLLISION  切换高亮显示启用了碰撞但是没有碰撞网格物体的静态网格物体</p><h3 id="显示命令"><a href="#显示命令" class="headerlink" title="显示命令"></a>显示命令</h3><h4 id="display系列"><a href="#display系列" class="headerlink" title="display系列"></a>display系列</h4><h4 id="displayall-class-prop"><a href="#displayall-class-prop" class="headerlink" title="displayall class prop"></a>displayall class prop</h4><p>在屏幕上实时地显示类class所有实例的属性prop的值</p><h4 id="display-obj-prop"><a href="#display-obj-prop" class="headerlink" title="display obj prop"></a>display obj prop</h4><p>在屏幕上实时地显示对象obj的属性prop的值。</p><h4 id="displayallstate-class"><a href="#displayallstate-class" class="headerlink" title="displayallstate class"></a>displayallstate class</h4><p>在屏幕上实时地显示类class所有实例的当前处于的状态，比如行走，空闲，攻击等</p><h4 id="displayclear"><a href="#displayclear" class="headerlink" title="displayclear"></a>displayclear</h4><p>清楚display系列命令所有的输出</p><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>set class/obj prop value<br>1. 设置给定类class（包括其子类）的所有对象的属性prop的值为value<br>2. 设置给定对象obj的属性prop的值为value</p><p>可以用displayall实时显示出来这个属性，再用set设置后观察属性变化。</p><h3 id="统计命令"><a href="#统计命令" class="headerlink" title="统计命令"></a>统计命令</h3><p>stat命令负责在游戏运行时在屏幕上启用显示统计数据功能。</p><h3 id="none"><a href="#none" class="headerlink" title="none"></a>none</h3><p>关闭所有统计数据的显示</p><h4 id="fps"><a href="#fps" class="headerlink" title="fps"></a>fps</h4><p>切换帧频率统计数据的显示</p><h4 id="anim"><a href="#anim" class="headerlink" title="anim"></a>anim</h4><p>切换动画系统统计数据的显示状态</p><h4 id="net"><a href="#net" class="headerlink" title="net"></a>net</h4><p>切换网络统计数据显示的 打开/关闭 状态</p><h4 id="game"><a href="#game" class="headerlink" title="game"></a>game</h4><p>切换游戏统计数据的显示。(更新时间等)</p><h4 id="ui"><a href="#ui" class="headerlink" title="ui"></a>ui</h4><p>切换UIScene统计数据的显示</p><h4 id="collision"><a href="#collision" class="headerlink" title="collision"></a>collision</h4><p>切换碰撞统计数据的显示状态</p><h4 id="octree"><a href="#octree" class="headerlink" title="octree"></a>octree</h4><p>切换八叉树相关统计数据的显示</p><h4 id="physics"><a href="#physics" class="headerlink" title="physics"></a>physics</h4><p>切换一般物理统计数据的显示<br>1. physicscloth 切换关于布料仿真统计数据的显示。<br>2. physicsfields 切换关于物理域的统计数据的显示状态。<br>3. physicsfluids 切换关于PhysX流体仿真统计数据的显示。</p><h3 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h3><p>切换一般内存统计数据的显示</p><h4 id="memorychurn"><a href="#memorychurn" class="headerlink" title="memorychurn"></a>memorychurn</h4><p>切换处理内存分配的统计数据的显示</p><h4 id="scenerendering"><a href="#scenerendering" class="headerlink" title="scenerendering"></a>scenerendering</h4><p>切换场景渲染统计数据的显示</p><h4 id="startfile-stopfile"><a href="#startfile-stopfile" class="headerlink" title="startfile/stopfile"></a>startfile/stopfile</h4><ol><li>startfile开始捕获统计数据文件以便和StatsViewer结合使用。</li><li>stopfile完成捕获统计数据文件。</li><li>文件存储位置：UDKGame\Profiling\UE3Stats\xxx文件..ustats</li><li>打开工具：Binaries\StatsViewer.exe</li></ol><h4 id="GameProfile-ProfileGame"><a href="#GameProfile-ProfileGame" class="headerlink" title="GameProfile/ProfileGame"></a>GameProfile/ProfileGame</h4><p>该命令在虚幻三和UDK中用于统计脚本函数的运行时间。<br>1. start 开始Profile<br>2. stop 结束Profile<br>3. 文件：UDKGame\Profiling\T-2016.11.29-19.26.55.gprof<br>4. 打开工具：Binaries\GameplayProfiler.exe<br>5. UObject::CallFunction中统计了每个函数的调用时间。</p><h3 id="调试命令"><a href="#调试命令" class="headerlink" title="调试命令"></a>调试命令</h3><p>调试命令的结果是控制台形式的输出，并不是在游戏窗口中显示。在逆战中，需要按f8显示控制台窗口，再输入调试命令。其余类型的命令可以使用f7也可以使用f8。</p><h4 id="obj"><a href="#obj" class="headerlink" title="obj"></a>obj</h4><h5 id="gc-garbage"><a href="#gc-garbage" class="headerlink" title="gc/garbage"></a>gc/garbage</h5><p>强制进行垃圾回收清理。</p><h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><p>显示包中的一个类别的所有物体的列表。<br>1. obj list显示包中所有的物体列表。<br>2. obj list class=pawn 只显示指定的类的所有物体的对象列表，比如pawn。</p><h5 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h5><p>dump objname<br>在控制台中输出某个对象的所有属性，可以先用displayall找到这个对象名。</p><h3 id="物理命令"><a href="#物理命令" class="headerlink" title="物理命令"></a>物理命令</h3><h5 id="nxvis-collision…"><a href="#nxvis-collision…" class="headerlink" title="nxvis collision…"></a>nxvis collision…</h5><p>碰撞相关命令</p><h5 id="nxvis-joint…"><a href="#nxvis-joint…" class="headerlink" title="nxvis joint…"></a>nxvis joint…</h5><p>关节相关命令</p><h5 id="nxvis-cloth…"><a href="#nxvis-cloth…" class="headerlink" title="nxvis cloth…"></a>nxvis cloth…</h5><p>布料相关命令</p><h5 id="nxvis-fluid…"><a href="#nxvis-fluid…" class="headerlink" title="nxvis fluid…"></a>nxvis fluid…</h5><p>流体相关命令</p><h5 id="nxvis-softbody…"><a href="#nxvis-softbody…" class="headerlink" title="nxvis softbody…"></a>nxvis softbody…</h5><p>软体相关命令</p><h3 id="内存命令"><a href="#内存命令" class="headerlink" title="内存命令"></a>内存命令</h3><h5 id="mem"><a href="#mem" class="headerlink" title="mem"></a>mem</h5><p>显示内存分配信息<br>1.  mem<br>2.  mem detailed<br>3.  mem stat</p><h5 id="configmem"><a href="#configmem" class="headerlink" title="configmem"></a>configmem</h5><p>显示配置文件内存分配信息</p><h5 id="particlememory"><a href="#particlememory" class="headerlink" title="particlememory"></a>particlememory</h5><p>粒子内存信息</p><h5 id="memfragcheck"><a href="#memfragcheck" class="headerlink" title="memfragcheck"></a>memfragcheck</h5><p>内存碎片检测</p><h5 id="memleakcheck"><a href="#memleakcheck" class="headerlink" title="memleakcheck"></a>memleakcheck</h5><p>内存泄漏检测</p><h3 id="UI-GFX命令"><a href="#UI-GFX命令" class="headerlink" title="UI/GFX命令"></a>UI/GFX命令</h3><h3 id="ShowHUD"><a href="#ShowHUD" class="headerlink" title="ShowHUD"></a>ShowHUD</h3><p>显示(隐藏)所有的HUD</p><h5 id="ShowScores"><a href="#ShowScores" class="headerlink" title="ShowScores"></a>ShowScores</h5><p>显示(隐藏)积分面板</p><h5 id="Toggleui"><a href="#Toggleui" class="headerlink" title="Toggleui"></a>Toggleui</h5><p>切换UI的更新和显示</p><h5 id="gfxinvoke"><a href="#gfxinvoke" class="headerlink" title="gfxinvoke"></a>gfxinvoke</h5><p>调用GfxMovie对应的flash文件的as函数</p><h5 id="dumpsftextures"><a href="#dumpsftextures" class="headerlink" title="dumpsftextures"></a>dumpsftextures</h5><p>输出GFx Texture Usage到log文件中。</p><h2 id="虚幻三控制台命令调用流程"><a href="#虚幻三控制台命令调用流程" class="headerlink" title="虚幻三控制台命令调用流程"></a>虚幻三控制台命令调用流程</h2><ul><li>APlayerController::ConsoleCommand。</li><li><ul><li>ULocalPlayer::Exec，处理一部分命令。</li></ul></li><li><ul><li><ul><li>UGameViewportClient::Exec，引擎自带的大部分命令在此函数中实现。</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>UGFxInteraction::Exec，执行gfx相关的命令。</li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li>UUIInteraction::Exec，处理一部分命令。</li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li><ul><li>UUIInteraction::ScriptConsoleExec。</li></ul></li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li><ul><li>UGameUISceneClient::Exec。</li></ul></li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li><ul><li><ul><li>UUISceneClient::Exec.</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li><ul><li><ul><li><ul><li>UUISceneClient::ScriptConsoleExec.</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li>UGameViewportClient::ScriptConsoleExec。</li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li>UEngine::Exec，处理一部分命令。</li></ul></li></ul></li></ul></li><li><ul><li><ul><li>UPlayer::Exec，处理一部分命令。</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>UWorld::Exec。</li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li>APlayerInput::ScriptConsoleExec</li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li>APlayerController::ScriptConsoleExec</li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li>APawn::ScriptConsoleExec</li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li>AInvManager::ScriptConsoleExec</li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li>AWeapon::ScriptConsoleExec</li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li>AHUD::ScriptConsoleExec</li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li>AGameInfo::ScriptConsoleExec</li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li>ACheatManager::ScriptConsoleExec</li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li>AInteraction::ScriptConsoleExec</li></ul></li></ul></li></ul></li><li>返回APlayerController::ConsoleCommand，命令未处理。</li></ul><p>注意：UObkect::ScriptConsoleExec，处理的是当前类中自定义脚本命令（执行带exec前缀的脚本函数）。<br>因此，流程中带有ScriptConsoleExec函数执行的类（以及子类）都可以定exec脚本函数来执行控制台命令。只有在处理流程中的命令才有效，处理流程外的命令无法被处理。</p><h3 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h3><h4 id="Native命令"><a href="#Native命令" class="headerlink" title="Native命令"></a>Native命令</h4><p>在控制台命令调用流程中涉及到的C++类的Exec函数中添加对新命令的处理逻辑。</p><h4 id="脚本命令"><a href="#脚本命令" class="headerlink" title="脚本命令"></a>脚本命令</h4><p>在处理流程中的有ScriptConsoleExec调用的类(Interaction、UISceneClient、GameViewportClient、PlayerInput、PlayerController、Pawn、InvManager、Weapon、HUD、GameInfo、CheatManager)<br>中添加exec前缀的脚本函数。</p><p>更多的游戏命令可以参考文档：<a href="https://wiki.beyondunreal.com/Legacy:Console_Commands" target="_blank" rel="noopener">Console Commands</a>。</p><h3 id="虚幻引擎游戏命令"><a href="#虚幻引擎游戏命令" class="headerlink" title="虚幻引擎游戏命令"></a>虚幻引擎游戏命令</h3><div class="video-container"><iframe src="https://onedrive.live.com/embed?cid=4330CD349D9ADD44&resid=4330CD349D9ADD44%21723&authkey=AFSrpMCVspcze0g&em=2" width="800" height="700" frameborder="0" allowfullscreen="allowfullscreen"></iframe></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命令行参数和控制台命令&quot;&gt;&lt;a href=&quot;#命令行参数和控制台命令&quot; class=&quot;headerlink&quot; title=&quot;命令行参数和控制台命令&quot;&gt;&lt;/a&gt;命令行参数和控制台命令&lt;/h2&gt;&lt;p&gt;游戏命令包括两种，一种是运行游戏时候指定的命令行参数，另外一种则指的
      
    
    </summary>
    
    
      <category term="UE4" scheme="http://xiaopengcheng.top/categories/UE4/"/>
    
    
      <category term="UE4" scheme="http://xiaopengcheng.top/tags/UE4/"/>
    
  </entry>
  
  <entry>
    <title>虚幻引擎命令行参数</title>
    <link href="http://xiaopengcheng.top/2016/12/03/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/"/>
    <id>http://xiaopengcheng.top/2016/12/03/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</id>
    <published>2016-12-03T13:17:20.000Z</published>
    <updated>2019-12-20T17:18:51.619Z</updated>
    
    <content type="html"><![CDATA[<p>命令行参数是指通过命令行或者可执行文件快捷方式启动游戏进程的时候，附加在后面的一系列参数。</p><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>命令行参数分为两种，一种是编译游戏代码时候需要用到的命令行参数。另一种则是在启动游戏进程时候指定的参数。</p><h3 id="编译命令行参数"><a href="#编译命令行参数" class="headerlink" title="编译命令行参数"></a>编译命令行参数</h3><p>编译代码期间会用到的参数如下：</p><ol><li><p>版本 -debug -release</p></p></li><li><p>全量 -full （默认增量）</p></li><li><p>自动更新C++头文件，不弹框确认 -auto<br>注意：虚幻三编译脚本.uc文件时候，会更新.h头文件</p></li><li><p>移除.u文件中的源代码信息 -stripsource注意：.u文件是虚幻三脚本文件编译后的字节码文件，虚幻四中不存在</p><p>因此，编译代码时候最多可能指定以下参数组合：<br>make -debug -full -auto -stripsource<br>make -release -full -auto  -stripsource</p></li></ol><p><strong>注意：通过在vs中指定make命令可以调试编译代码的过程。</strong><br>如下图所示：<br><img src="https://c2.staticflickr.com/6/5486/31353510066_d0fd3565ee_o.png" alt="enter description here"></p><h3 id="运行命令行参数"><a href="#运行命令行参数" class="headerlink" title="运行命令行参数"></a>运行命令行参数</h3><p>启动游戏进程指定的命令行参数分为两个个部分，第一个部分用于指定进程的运行模式（客户端、服务器、编辑器），第二个部分用于指定地图的URL以及附加选项。</p><h4 id="运行模式"><a href="#运行模式" class="headerlink" title="运行模式"></a>运行模式</h4><p>游戏进程可以用三种不同的模式进行启动，分别是客户端、服务器、编辑器模式。因此，虚幻引擎生成的游戏可执行文件同时可以作为游戏服务器、游戏客户端、游戏编辑器运行。这是一个很神奇的地方。</p><ol><li><p>客户端模式<br>默认情况下，启动的游戏进程就是客户端模式，不需要指定额外的命令行参数。<br>在UE4中，也可以指定-game参数。</p></li><li><p>服务器模式<br>通过指定server参数，可以启动一个游戏服务器。<br>比如，udk.exe server，则是使用udk启动一个游戏服务器。<br>对于UE4，则是UE4Editor.exe -server。<br>实际上，可以修改游戏引擎设置，输出自定义的游戏执行文件。在启动这个游戏可执行文件时候，只需要附近sever参数就可以启动一个游戏服务器。</p></li><li><p>编辑器模式<br>通过指定editor参数，可以启动一个游戏服务器。<br>比如，udk.exe editor，则是使用udk启动游戏编辑器。<br>对于UE4，则是UE4Editor.exe -editor。</p></li></ol><h4 id="模式的URL参数"><a href="#模式的URL参数" class="headerlink" title="模式的URL参数"></a>模式的URL参数</h4><p>URL分为两个部分：地图名称或者服务器地址，可选的附加参数。<br>地图部分用于强制游戏启动时候加载特定的地图，附加参数用于设置额外的启动方式，比如设置分辨率，是否打开log窗口等。这些参数和server或editor模式结合起来就可以启动特定地图的服务器或者用编辑器打开特定地图。<br>如果没有url参数，那么游戏进程会打开默认的地图。URL参数必须在可执行命令名称的后面或者在模式参数后面。</p><ol><li><p>地图<br>如果运行本地游戏，则指定Maps目录下的地图名称，比如MyMap. umap。<br>如果运行网络游戏，则指定游戏服务器的IP地址（server模式启动的游戏进程就是游戏服务器）。</p></li><li><p>附加参数<br>附加参数与地图之间用”?”分隔。<br>附加参数分为两种类型，一种是用”=”指定的选项，一种是用”-“指定的开关。</p><p>常用的选项参数：<br>dedicated：指定服务器作为专用服务器。<br>listen: 指定服务器作为监听服务器 。<br>spectatoronly：以观看模式启动游戏<br>class: 告诉引擎要使用的玩家类(覆盖默认值)。<br>game:: 指定使用的GameInfo类。<br>name: 要使用的玩家名称。<br>team: 指定玩家所在的团队。<br>resx/resy: 设置游戏窗口的分辨率。<br>consolex/consoley：设置控制台窗口(log窗口)分辨率。</p><p>常用的开关参数：<br>log: 打开日志窗口。<br>windowed：窗口模式运行。<br>nomoviestartup: 略过启动动画。<br>nosplash: 略过启动splash窗口。</p><p>更多的附加参数请参考文档：[虚幻四引擎命令行参数](https://docs.unrealengine.com/latest/CHN/Programming/Basics/CommandLineArguments/index.html)</li><li><p>一些示例：<br>UDK.exe server MyMap.udk<br>UDK.exe 127.0.0.1<br>UDK.exe MyMap.udk?-resX=640 -resY=480 -log log=log.txt<br>UDKLift.exe DM-发电站?Game=UTGame.UTTeamGame?listen=true?TeamIndex=0?Name=FS01 -log -windowed -resX=640 -resY=360 -nomoviestartup -nosplash windowPosX=0 windowPosY=0 -consolePosX=0 -consolePosY=365<br>MyGame.exe editor MyMap.umap -NoLoadStartupPackages -NoGADWarning</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;命令行参数是指通过命令行或者可执行文件快捷方式启动游戏进程的时候，附加在后面的一系列参数。&lt;/p&gt;
&lt;h2 id=&quot;命令行参数&quot;&gt;&lt;a href=&quot;#命令行参数&quot; class=&quot;headerlink&quot; title=&quot;命令行参数&quot;&gt;&lt;/a&gt;命令行参数&lt;/h2&gt;&lt;p&gt;命令行参数
      
    
    </summary>
    
    
      <category term="UE4" scheme="http://xiaopengcheng.top/categories/UE4/"/>
    
    
      <category term="UE4" scheme="http://xiaopengcheng.top/tags/UE4/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="http://xiaopengcheng.top/2016/10/30/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>http://xiaopengcheng.top/2016/10/30/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</id>
    <published>2016-10-30T08:14:09.000Z</published>
    <updated>2019-12-19T16:22:33.349Z</updated>
    
    <content type="html"><![CDATA[<p>岁月如梭，光阴似箭。转眼间工作一年多了，我也即将二十八周岁了。常说三十而立，想想就觉得忐忑。生命一分分、一秒秒流逝，就如同抓不住的流水，站在漫漫的荒野中，永远无法回头。</p><p>佛说，人之所以痛苦，在于追求错误的东西。佛说，缘起缘灭，缘生已空。佛说，世间万物皆空，唯其空，便能包容万物。我不是佛，我是人。所以，我痛苦，我在追求错误的东西，我执着于缘生，我无法放空自己。</p><p>岁月如梭。感慨万千。沉沦于苦海中，幻想过很多或许。或许勇敢一些，自信一些，或许努力一些，或许早点觉悟，早点逃离自己的舒适床，早点更有担当，或许我是一个刻苦的人，或许早点学会伪装，早点懂得高情商套路。或许我就不该怀恋那片刻的阳光。但是，乞丐一旦品尝过美食的味道，一辈子就无法忘怀，而我就是那个乞丐。</p><p>如果可以选择，我宁愿从来没有感受过这样的温暖。</p><p>对了，我想要说的是新的开始，而不是一直啰嗦于曾经的苦水。未来真的还不知道要怎么过，想想这几年最开心的日子除了发工资发奖金的那天，就是在家里钓鱼有收获的时刻。其实，作为一个loser又有什么不开心的了，所以我一般都笑得很开心，因为确实没什么不开心的。无论我开心也好，痛苦也好，努力也好，懒惰也好，今天都会过去，明年总会来临，总有一个今天会成为我最后的一天。总有一天我会经历生老病死别离。有个时候觉得，让自己在乎的人快乐也是一件很有意义的事情。</p><p>作为一个年近三十的大叔，还这么幼稚，表示无法接受。我这个年纪应该是在干大事，不是当CTO，当老板，就应该在美利坚读博士，在龙泉寺出家，或者在各种聊天软件约小妹妹。作为一个无病呻吟的屌丝，表示完全无法接受这一切。所以，我只能呻吟几下，聊作慰藉。</p><p>总有一天，风雪会过去的吧。乘着这场大风雪，多吃几顿炖菜吧。是时候拿出壮士断腕的勇气了，该彻底抛弃的抛弃，该培养的坚持培养，总不能再下一个三到五年后，又悔不当初，悔之晚矣。时光才是最珍贵的。</p><p>我经历的所有困难，只是为了遇见更好的你。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;岁月如梭，光阴似箭。转眼间工作一年多了，我也即将二十八周岁了。常说三十而立，想想就觉得忐忑。生命一分分、一秒秒流逝，就如同抓不住的流水，站在漫漫的荒野中，永远无法回头。&lt;/p&gt;
&lt;p&gt;佛说，人之所以痛苦，在于追求错误的东西。佛说，缘起缘灭，缘生已空。佛说，世间万物皆空，唯其
      
    
    </summary>
    
    
      <category term="生活" scheme="http://xiaopengcheng.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="随想" scheme="http://xiaopengcheng.top/categories/%E7%94%9F%E6%B4%BB/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>使用DebugView实时显示Log</title>
    <link href="http://xiaopengcheng.top/2016/08/15/%E4%BD%BF%E7%94%A8DebugView%E5%AE%9E%E6%97%B6%E6%98%BE%E7%A4%BALog/"/>
    <id>http://xiaopengcheng.top/2016/08/15/%E4%BD%BF%E7%94%A8DebugView%E5%AE%9E%E6%97%B6%E6%98%BE%E7%A4%BALog/</id>
    <published>2016-08-15T12:48:18.000Z</published>
    <updated>2019-12-19T16:22:33.320Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DebugView简介"><a href="#DebugView简介" class="headerlink" title="DebugView简介"></a>DebugView简介</h3><p>DebugView是一个监视本地系统或者通过tcp/ip连接的网络系统的OutputDebugString输出的应用程序。DebugView不仅能够监视Win32应用的debug输出，还可以监视内核模型的debug输出。因此，如果使用OutputDebugString来打印调试信息的话，就可以在程序运行时候通过DebugView来实时显示程序的调试信息。<br>这种方式在某种意义上，比将Log打印到文件中，关闭程序后再查看Log输出的方式更加方便。而且可以将这两种调试程序的方式结合起来，既使用DebugView来实时显示调试信息，又将调试信息输出到Log文件中，方便以后分析。</p><h2 id="安装DebugView"><a href="#安装DebugView" class="headerlink" title="安装DebugView"></a>安装DebugView</h2><p>下载地址：<a href="https://technet.microsoft.com/en-us/sysinternals/debugview.aspx" target="_blank" rel="noopener">DebugView</a><br>下载后面后解压压缩包，发现里面有三个文件：Dbgview.exe、dbgview.chm、Eula.txt。<br>Dbgview.exe就是我们要使用的实时显示Log工具。dbgview.chm是自带的文档，有不懂的地方可以查阅该文档。<br>现在可以将DebugView.exe放到任何你喜欢的目录，比如桌面。</p><h2 id="配置DebugView"><a href="#配置DebugView" class="headerlink" title="配置DebugView"></a>配置DebugView</h2><h3 id="配置Capture"><a href="#配置Capture" class="headerlink" title="配置Capture"></a>配置Capture</h3><p>如下图所示，要记得勾选Capture Win32和Capture Global Win32。Capture Global Win32用于网络模式下捕获网络主机的Debug输出的时候。如果需要捕获内核模式的调试输出，记得勾选Capture Kernel Win32。<br><img src="https://c1.staticflickr.com/9/8750/28713108000_0384dfb06a_o.png" alt="enter description here"><br>如果点击Capture Global Win32菜单出现提示：<br><img src="https://c1.staticflickr.com/9/8315/28999300555_61681b6880_o.png" alt="enter description here"><br>重新以管理员的身份启动DebugView。<br><img src="https://c1.staticflickr.com/9/8897/28999300535_075a591b02_o.png" alt="enter description here"></p><h3 id="配置Filter"><a href="#配置Filter" class="headerlink" title="配置Filter"></a>配置Filter</h3><p>如下图所示，打开Filter对话框，<br><img src="https://c2.staticflickr.com/8/7507/28923046321_72cd949daa_o.png" alt="enter description here"><img src="https://c1.staticflickr.com/9/8744/28713274070_2809e64189_o.png" alt="enter description here"><br>然后在Include中输入要包含的字符串，比如”hankpcxiao”，多个字符串用;分隔，比如”hankpcxiao;xpc”。<br>这样就只会捕获包括过滤字符串hankpcxiao或者xpc的OutputDebugString输出。<br>如果我们在每个OutputDebugString输出前自动加上过滤字符串，那么DebugView就只会输出我们的Log信息了。</p><h3 id="开启捕获"><a href="#开启捕获" class="headerlink" title="开启捕获"></a>开启捕获</h3><p>最后确保开启了捕获，如下图所示：<br><img src="https://c1.staticflickr.com/9/8842/28999300405_0355a4405f_o.png" alt="enter description here"></p><h2 id="如何在程序中输出Log信息？"><a href="#如何在程序中输出Log信息？" class="headerlink" title="如何在程序中输出Log信息？"></a>如何在程序中输出Log信息？</h2><p>默认情况下，DebugView会捕获函数OutputDebugString的输出，但是这个函数的参数是个字符串指针，不太方便。下面我们通过一些列步骤来创建一个方便使用的Log类。</p><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>我们习惯使用printf这样的函数来格式化输出信息，因此这次我们也把OutputDebugString包装成可变参数形式的格式化输出函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DebugViewOutput</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* fm, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> szMsg[MAX_PATH];</span><br><span class="line"></span><br><span class="line">    va_list argList;</span><br><span class="line">    va_start(argList, fm);</span><br><span class="line">    vsprintf_s(szMsg, fm, argList);</span><br><span class="line">    va_end(argList);</span><br><span class="line"></span><br><span class="line">    OutputDebugString(szMsg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="让DebugView在VS调试程序时候也能够捕获Log"><a href="#让DebugView在VS调试程序时候也能够捕获Log" class="headerlink" title="让DebugView在VS调试程序时候也能够捕获Log"></a>让DebugView在VS调试程序时候也能够捕获Log</h3><p>网上有不少介绍DebugView使用的文章，但是都忽略了一个事实，那就是默认情况下，使用VS运行程序时候，OutputDebugString的输出是到VS的输出窗口中，DebugView中并没有任何信息。只有单独运行程序的时候，DebugView才能够捕捉到信息。<br>但是这样就不能结合打断点调试和DebugView两个强大的调试方法了。不过，还是有解决办法的。通过一个叫做DBWin通信机制可以实现调试程序时候，把OutputDebugString的输出信息显示到DebugView窗口中。这套机制的本质是通过内存映射文件来跨进程交换数据。<br>具体参考以下的类代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">XpcDebugView</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        XpcDebugView() &#123;&#125;</span><br><span class="line">        ~XpcDebugView() &#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">XpcDebugViewOutput</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* fm, ...)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">DBWinBuffer</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            DWORD ProcessId;</span><br><span class="line">            <span class="keyword">char</span> Data[<span class="number">4096</span> - <span class="keyword">sizeof</span>(DWORD)];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">Initialize</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">UnInitialize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        HANDLE m_mutex;</span><br><span class="line">        HANDLE m_fileMapping;</span><br><span class="line">        HANDLE m_bufferReadyEvent;</span><br><span class="line">        HANDLE m_dataReadyEvent;</span><br><span class="line">        DBWinBuffer* m_buffer;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> XpcDebugView::Initialize()</span><br><span class="line">    &#123;</span><br><span class="line">        m_mutex = OpenMutex(SYNCHRONIZE, FALSE, TEXT(<span class="string">"DBWinMutex"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打开DBWIN_BUFFER</span></span><br><span class="line">        m_fileMapping = OpenFileMapping(FILE_MAP_WRITE, FALSE, TEXT(<span class="string">"DBWIN_BUFFER"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_fileMapping == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打开DBWIN_BUFFER_READY</span></span><br><span class="line">        m_bufferReadyEvent = OpenEvent(SYNCHRONIZE, FALSE, TEXT(<span class="string">"DBWIN_BUFFER_READY"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打开DBWIN_DATA_READY</span></span><br><span class="line">        m_dataReadyEvent = OpenEvent(EVENT_MODIFY_STATE, FALSE, TEXT(<span class="string">"DBWIN_DATA_READY"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待DBWIN_BUFFER就绪</span></span><br><span class="line">        WaitForSingleObject(m_bufferReadyEvent, INFINITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把DBWIN_BUFFER映射到某个地址</span></span><br><span class="line">        m_buffer = (DBWinBuffer*)MapViewOfFile(m_fileMapping, FILE_MAP_WRITE, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        m_buffer-&gt;ProcessId = GetCurrentProcessId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> XpcDebugView::UnInitialize()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//释放和关闭DBWIN_BUFFER</span></span><br><span class="line">        FlushViewOfFile(m_buffer, <span class="number">0</span>);</span><br><span class="line">        UnmapViewOfFile(m_buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发DBWIN_DATA_READY</span></span><br><span class="line">        SetEvent(m_dataReadyEvent);</span><br><span class="line"></span><br><span class="line">        CloseHandle(m_fileMapping);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清理</span></span><br><span class="line">        CloseHandle(m_dataReadyEvent);</span><br><span class="line">        CloseHandle(m_bufferReadyEvent);</span><br><span class="line">        ReleaseMutex(m_mutex);</span><br><span class="line">        CloseHandle(m_mutex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> XpcDebugView::XpcDebugViewOutput(<span class="keyword">const</span> <span class="keyword">char</span>* fm, ...)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Initialize() == <span class="literal">false</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> szMsg[MAX_PATH];</span><br><span class="line"></span><br><span class="line">        va_list argList;</span><br><span class="line">        va_start(argList, fm);</span><br><span class="line">        vsprintf_s(szMsg, fm, argList);</span><br><span class="line">        va_end(argList);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>( push )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>( disable: 4996 )</span></span><br><span class="line">        <span class="comment">//向DBWIN_BUFFER写入数据</span></span><br><span class="line">        <span class="built_in">strcpy</span>(m_buffer-&gt;Data, szMsg);</span><br><span class="line">        <span class="built_in">printf</span>(szMsg);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>( pop )</span></span><br><span class="line"></span><br><span class="line">        UnInitialize();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用的时候直接调用类成员函数XpcDebugViewOutput即可。<br>关于这部分的内容更具体的可以参考文章，<a href="http://dooof.lofter.com/tag/DebugView" target="_blank" rel="noopener">如何让OutputDebugString绕过调试器</a></p><h3 id="输出到DebugView的同时输出到Log文件"><a href="#输出到DebugView的同时输出到Log文件" class="headerlink" title="输出到DebugView的同时输出到Log文件"></a>输出到DebugView的同时输出到Log文件</h3><p>我将上面的类改造成下面的样子，在初始化时候创建一个Log文件，在反初始化时候关闭Log文件，每次调用XpcDebugViewOutput使用调用fprintf将格式化字符串输出到文件中。这样就能达到输出Log信息到DebugView中的同时，又能够将Log信息持久化保存了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">XpcDebugView</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        XpcDebugView() &#123; m_pszLogName = <span class="string">"DefaultLog.txt"</span>; Initialize();  &#125;</span><br><span class="line">        XpcDebugView(<span class="keyword">const</span> <span class="keyword">char</span>* pszLogName) &#123; m_pszLogName = pszLogName; Initialize();&#125;</span><br><span class="line">        ~XpcDebugView() &#123; UnInitialize(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">XpcDebugViewOutput</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* fm, ...)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">DBWinBuffer</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            DWORD ProcessId;</span><br><span class="line">            <span class="keyword">char</span> Data[<span class="number">4096</span> - <span class="keyword">sizeof</span>(DWORD)];</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">Initialize</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">UnInitialize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">InitializeDBWin</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">UnInitializeDBWin</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        HANDLE m_mutex;</span><br><span class="line">        HANDLE m_fileMapping;</span><br><span class="line">        HANDLE m_bufferReadyEvent;</span><br><span class="line">        HANDLE m_dataReadyEvent;</span><br><span class="line">        DBWinBuffer* m_buffer;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* m_pszLogName;</span><br><span class="line">        FILE* m_pFileLog;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>( push )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>( disable: 4996 )</span></span><br><span class="line">    <span class="keyword">bool</span> XpcDebugView::Initialize()</span><br><span class="line">    &#123;</span><br><span class="line">        m_pFileLog = fopen(m_pszLogName, <span class="string">"w"</span>);</span><br><span class="line">        <span class="keyword">return</span> m_pFileLog != <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> XpcDebugView::UnInitialize()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_pFileLog)</span><br><span class="line">        &#123;</span><br><span class="line">            fclose(m_pFileLog);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> XpcDebugView::InitializeDBWin()</span><br><span class="line">    &#123;</span><br><span class="line">        m_mutex = OpenMutex(SYNCHRONIZE, FALSE, TEXT(<span class="string">"DBWinMutex"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打开DBWIN_BUFFER</span></span><br><span class="line">        m_fileMapping = OpenFileMapping(FILE_MAP_WRITE, FALSE, TEXT(<span class="string">"DBWIN_BUFFER"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_fileMapping == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打开DBWIN_BUFFER_READY</span></span><br><span class="line">        m_bufferReadyEvent = OpenEvent(SYNCHRONIZE, FALSE, TEXT(<span class="string">"DBWIN_BUFFER_READY"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打开DBWIN_DATA_READY</span></span><br><span class="line">        m_dataReadyEvent = OpenEvent(EVENT_MODIFY_STATE, FALSE, TEXT(<span class="string">"DBWIN_DATA_READY"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待DBWIN_BUFFER就绪</span></span><br><span class="line">        WaitForSingleObject(m_bufferReadyEvent, INFINITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把DBWIN_BUFFER映射到某个地址</span></span><br><span class="line">        m_buffer = (DBWinBuffer*)MapViewOfFile(m_fileMapping, FILE_MAP_WRITE, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        m_buffer-&gt;ProcessId = GetCurrentProcessId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> XpcDebugView::UnInitializeDBWin()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//释放和关闭DBWIN_BUFFER</span></span><br><span class="line">        FlushViewOfFile(m_buffer, <span class="number">0</span>);</span><br><span class="line">        UnmapViewOfFile(m_buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发DBWIN_DATA_READY</span></span><br><span class="line">        SetEvent(m_dataReadyEvent);</span><br><span class="line"></span><br><span class="line">        CloseHandle(m_fileMapping);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清理</span></span><br><span class="line">        CloseHandle(m_dataReadyEvent);</span><br><span class="line">        CloseHandle(m_bufferReadyEvent);</span><br><span class="line">        ReleaseMutex(m_mutex);</span><br><span class="line">        CloseHandle(m_mutex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> XpcDebugView::XpcDebugViewOutput(<span class="keyword">const</span> <span class="keyword">char</span>* fm, ...)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (InitializeDBWin() == <span class="literal">false</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> szMsg[MAX_PATH];</span><br><span class="line"></span><br><span class="line">        va_list argList;</span><br><span class="line">        va_start(argList, fm);</span><br><span class="line">        vsprintf_s(szMsg, fm, argList);</span><br><span class="line">        va_end(argList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向DBWIN_BUFFER写入数据</span></span><br><span class="line">        <span class="built_in">strcpy</span>(m_buffer-&gt;Data, szMsg);</span><br><span class="line">        <span class="keyword">if</span> (m_pFileLog)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(m_pFileLog, szMsg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UnInitializeDBWin();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>( pop )</span></span><br></pre></td></tr></table></figure><h3 id="如何使用XpcDebugView类"><a href="#如何使用XpcDebugView类" class="headerlink" title="如何使用XpcDebugView类"></a>如何使用XpcDebugView类</h3><p>最简单的方式是定义一个XpcDebugView的全局变量，比如：<br>XpcDebugView myDebugview(“myLog.txt”);<br>输出Log信息的时候调用函数myDebugview.XpcDebugViewOutput(“%d %d %s\n”, 1, 2, “log”):<br>为了方便使用，可以在XpcDebugViewOutput的输出后面添加换行符，这样每次调用后就会自动换行了。<br>并且加上过滤字符串前缀，这样DebugView就只会捕获我们的输出了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> XpcDebugView::XpcDebugViewOutput(<span class="keyword">const</span> <span class="keyword">char</span>* fm, ...)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> szMsg[MAX_PATH];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> szOutput[MAX_PATH];</span><br><span class="line"></span><br><span class="line">    va_list argList;</span><br><span class="line">    va_start(argList, fm);</span><br><span class="line">    vsprintf_s(szMsg, fm, argList);</span><br><span class="line">    va_end(argList);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(szOutput, <span class="string">"[hankpcxiao] "</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(szOutput, szMsg);</span><br><span class="line">    <span class="built_in">strcat</span>(szOutput, <span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> (m_pFileLog)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(m_pFileLog, szOutput);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向DBWIN_BUFFER写入数据</span></span><br><span class="line">    <span class="keyword">if</span> (InitializeDBWin())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(m_buffer-&gt;Data, szOutput);</span><br><span class="line">        UnInitializeDBWin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先需要下载好DebugView程序，然后配置capture选项，另外是Filter字符串。最后为了保证在VS中调试程序时候，能够将调试信息输出到DebugView，需要使用DBWin通信进制。为此，我封装了一个Log类，在将Log输出到DebugView的同时也将Log输出到日志文件中。</p><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p>&#91;1]    <a href="https://community.sophos.com/kb/en-us/119577" target="_blank" rel="noopener">Frequently asked questions on the Microsoft application DebugView.exe</a><br>&#91;2]    <a href="http://dooof.lofter.com/tag/DebugView" target="_blank" rel="noopener">如何让OutputDebugString绕过调试器</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;DebugView简介&quot;&gt;&lt;a href=&quot;#DebugView简介&quot; class=&quot;headerlink&quot; title=&quot;DebugView简介&quot;&gt;&lt;/a&gt;DebugView简介&lt;/h3&gt;&lt;p&gt;DebugView是一个监视本地系统或者通过tcp/ip连接的网络系
      
    
    </summary>
    
    
      <category term="C/C++" scheme="http://xiaopengcheng.top/categories/C-C/"/>
    
    
      <category term="DebugView" scheme="http://xiaopengcheng.top/tags/DebugView/"/>
    
  </entry>
  
  <entry>
    <title>WebGL介绍</title>
    <link href="http://xiaopengcheng.top/2016/07/09/WebGL%E4%BB%8B%E7%BB%8D/"/>
    <id>http://xiaopengcheng.top/2016/07/09/WebGL%E4%BB%8B%E7%BB%8D/</id>
    <published>2016-07-09T14:22:43.000Z</published>
    <updated>2019-12-19T16:22:33.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebGL概述"><a href="#WebGL概述" class="headerlink" title="WebGL概述"></a>WebGL概述</h2><p>什么是WebGL？WebGL简单的说就是在Web中渲染OpenGL的技术，也可以理解为把OpenGL的接口移植到浏览器中使用。具体的可以参考<a href="https://zh.wikipedia.org/wiki/WebGL" target="_blank" rel="noopener">WebGL的维基百科</a>。<br>使用WebGL可以通过编写网页代码在浏览器中渲染三维图像，而且不需要任何的插件，比如Adobe Flash Player等。<br>WebGL在最新的浏览器中得到了广泛支持。</p><h2 id="WebGL与HTML5的关系"><a href="#WebGL与HTML5的关系" class="headerlink" title="WebGL与HTML5的关系"></a>WebGL与HTML5的关系</h2><p><a href="https://zh.wikipedia.org/zh-cn/HTML5" target="_blank" rel="noopener">HTML5</a>是最新的HTML（超文本标记语言）的最新修订版本。<br>HTML5中新增了<code>&lt;canvas&gt;</code>标签用于绘图。在HTML5之前，只能使用<code>&lt;img&gt;</code>标签在网页中显示静态图片，如果要显示动画得借助于Adobe Flash Player等第三方插件。在HTML5中，可以在<code>&lt;canvas&gt;</code>标签上绘制二维图像，也可以使用WebGL绘制三维图像。<br>WebGL相对于HTML5的关系就好比是OpenGL库和三维应用程序的关系。WebGL只是提供了底层的渲染和计算的函数。</p><h2 id="WebGL与JavaScript的关系"><a href="#WebGL与JavaScript的关系" class="headerlink" title="WebGL与JavaScript的关系"></a>WebGL与JavaScript的关系</h2><p><a href="https://zh.wikipedia.org/wiki/JavaScript" target="_blank" rel="noopener">JavaScript</a>是一种浏览器中运行的动态脚本语言。WebGL也需要依靠JavaScript来操作浏览器中的对象。JavaScript与WebGL的关系类似于C或者C++和OpenGL的关系。</p><h2 id="WebGL与OpenGL的关系"><a href="#WebGL与OpenGL的关系" class="headerlink" title="WebGL与OpenGL的关系"></a>WebGL与OpenGL的关系</h2><p>WebGL基于OpenGL ES 2.0，WebGL实现了OpenGL ES 2.0的一个子集。WebGL使用Javascript进行内存管理，使用GLSL ES作为着色器语言。具体的关系可以参考下图：<br><img src="https://c2.staticflickr.com/8/7581/28115784971_1e25355d87_o.png" alt="WebGL与OpenGL"></p><h2 id="WebGL程序的结构"><a href="#WebGL程序的结构" class="headerlink" title="WebGL程序的结构"></a>WebGL程序的结构</h2><p>默认情况下，网页程序包括HTML和Javascript脚本语言两部分。但是WebGL程序，还有特殊的GLSL ES着色器语言部分。<br>具体结构如下图所示：<br><img src="https://c1.staticflickr.com/9/8738/27578325223_d5b354ecce_o.png" alt="WebGL程序的结构"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍WebGL的基本概念，以及WebGL和HTML、JavaScript、OpenGL之间的关系等。接下来的文章会介绍具体的WebGL编程知识。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>&#91;1] WebGL编程指南<br>&#91;2] 维基百科</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WebGL概述&quot;&gt;&lt;a href=&quot;#WebGL概述&quot; class=&quot;headerlink&quot; title=&quot;WebGL概述&quot;&gt;&lt;/a&gt;WebGL概述&lt;/h2&gt;&lt;p&gt;什么是WebGL？WebGL简单的说就是在Web中渲染OpenGL的技术，也可以理解为把OpenGL
      
    
    </summary>
    
    
      <category term="图形学" scheme="http://xiaopengcheng.top/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
      <category term="WebGL" scheme="http://xiaopengcheng.top/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/WebGL/"/>
    
    
      <category term="WebGL" scheme="http://xiaopengcheng.top/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>关于博客的最近变动</title>
    <link href="http://xiaopengcheng.top/2016/07/09/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%9C%80%E8%BF%91%E5%8F%98%E5%8A%A8/"/>
    <id>http://xiaopengcheng.top/2016/07/09/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%9C%80%E8%BF%91%E5%8F%98%E5%8A%A8/</id>
    <published>2016-07-09T09:53:05.000Z</published>
    <updated>2019-12-19T16:22:33.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="博客移动到www-xpc-yx-blog"><a href="#博客移动到www-xpc-yx-blog" class="headerlink" title="博客移动到www.xpc-yx/blog"></a>博客移动到<a href="http://www.xpc-yx/blog" target="_blank" rel="noopener">www.xpc-yx/blog</a></h2><p>以前一直想用个炫酷的个人页放到网站根目录，一直没弄好，不了了之。wordpresss用多了之后发现挺简单的，只需要把wordpress安装到空间的public_html的子目录就可以，于是在网上搜索wordpress安装到子目录解决之。目前首页放的是一个ThreeJs渲染的天空盒，以后再慢慢修改吧。</p><h2 id="文章采用markdown编写"><a href="#文章采用markdown编写" class="headerlink" title="文章采用markdown编写"></a>文章采用markdown编写</h2><p>一直以来都是直接在wordpress的后台编辑器写文章，去年开始用微软的windows live write发布文章，可以参考<a href="http://www.xpc-yx.com/blog/2015/11/25/%E8%AF%95%E8%AF%95windows-live-write%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">试试windows live write发布博客</a>。<br>Markdown的语法比较简单，随便找个文档尝试下，找个编辑器就可以开始写作了。关于编辑器的选择，我现在也不知道，找了好久也没觉得哪个特别合适。大家都觉得好的大部分要收费，或者是付费会员服务。目前选择了<a href="http://soft.xiaoshujiang.com/" target="_blank" rel="noopener">小书匠</a>，先尝试一段时间吧。小书匠可以将文章存储在云空间上，我选择了保存到我的印象笔记中，这样内容就不会轻易丢失了，打算以后所有的写作都使用Markdown了。<br>wordpress的Markdown插件我选择了JP Markdown，代码编辑器继续使用SyntaxHighlighter Evolved。不过SyntaxHighlighter Evolved和JP Markdown有一个兼容问题，无法识别<code>&lt;</code>和<code>&gt;</code>符号。为此需要将将插件代码syntaxhighlighter\syntaxhighlighter.php 中的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$code = ( <span class="literal">false</span> === strpos( $code, <span class="string">'&lt;'</span> )  <span class="literal">false</span> === strpos( $code, <span class="string">'&gt;'</span> )  <span class="number">2</span> == $<span class="keyword">this</span>-&gt;get_code_format($post) ) ? strip_tags( $code ) : htmlspecialchars( $code );</span><br></pre></td></tr></table></figure><p>替换为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$code = ( <span class="literal">false</span> === strpos( $code, <span class="string">'&lt;'</span> )  <span class="literal">false</span> === strpos( $code, <span class="string">'&gt;'</span> ) ) ? strip_tags( $code ) : htmlspecialchars( $code );</span><br></pre></td></tr></table></figure><h2 id="建立了个github的静态副站"><a href="#建立了个github的静态副站" class="headerlink" title="建立了个github的静态副站"></a>建立了个github的静态副站</h2><p>由于上个月20号左右博客的流量就耗尽了，所以这个月本来打算将博客迁移到github上面去的。在网上搜索了教程用hexo建立一个静态网站，地址是<a href="https://xpc-yx.github.io/" target="_blank" rel="noopener">远行’s Life Github 副站</a>。使用的是最流行的next主题。由于我的博客文章实在太多了，前言过程中出现不少错误，忙了两天后发现迁移过去的文章格式也不对，只得作罢。把全部迁移过去耗费的时间实在需要太多了。<br>不过，这个github副站也是可能会更新内容的。</p><h2 id="打算写WebGL相关的教程"><a href="#打算写WebGL相关的教程" class="headerlink" title="打算写WebGL相关的教程"></a>打算写WebGL相关的教程</h2><p>最近在了WebGL和OpenGL的资料，学到了不少以前不是不是很了解又很有意思的知识。比如，VBO和VFO，后处理，HDR，Bloom，Deferred Shading（延迟渲染）等。推荐WebGL书籍：<a href="https://book.douban.com/subject/25909351/" target="_blank" rel="noopener">WebGL编程指南</a>，据说是类似红宝书的官方推荐书籍。仔细阅读之后学到了不少关于WebGL、OpenGL、图形学的基础知识，因为这些都是想通的。另外，发现了一个很不错的现代版本OpenGL教程：<a href="https://learnopengl-cn.readthedocs.io/zh/latest/" target="_blank" rel="noopener"> LearnOpenGL-CN</a>。最近一直在看这个教程，也接近看完了，基本上将可编程流水线讲清楚了，还有常用的实时渲染基础知识：比如Phong光照模型、Cubemap、Shadow mapping、法线贴图、视察贴图、HDR、Bloom、伽马校正、多样本抗锯齿算法、延迟渲染等都讲得很清楚，收获很大。强烈推荐阅读该教程，我打算将该教程代码用WebGL实现一遍，敬请期待。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;博客移动到www-xpc-yx-blog&quot;&gt;&lt;a href=&quot;#博客移动到www-xpc-yx-blog&quot; class=&quot;headerlink&quot; title=&quot;博客移动到www.xpc-yx/blog&quot;&gt;&lt;/a&gt;博客移动到&lt;a href=&quot;http://www.x
      
    
    </summary>
    
    
      <category term="生活" scheme="http://xiaopengcheng.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>使用MFC创建基于图片的不规则窗口程序</title>
    <link href="http://xiaopengcheng.top/2016/04/23/%E4%BD%BF%E7%94%A8MFC%E5%88%9B%E5%BB%BA%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%9A%84%E4%B8%8D%E8%A7%84%E5%88%99%E7%AA%97%E5%8F%A3%E7%A8%8B%E5%BA%8F/"/>
    <id>http://xiaopengcheng.top/2016/04/23/%E4%BD%BF%E7%94%A8MFC%E5%88%9B%E5%BB%BA%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%9A%84%E4%B8%8D%E8%A7%84%E5%88%99%E7%AA%97%E5%8F%A3%E7%A8%8B%E5%BA%8F/</id>
    <published>2016-04-23T12:45:25.000Z</published>
    <updated>2019-12-19T16:22:33.322Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章定制IE浏览器弹窗中的外部窗口就是一个不规则窗口，这篇文章介绍下其是如何实现的。思路是根据这张图片创建一个不规则区域，然后将窗口的区域设置为该不规则区域。</p><h2 id="第一步，在资源文件rc中设置对话框的属性"><a href="#第一步，在资源文件rc中设置对话框的属性" class="headerlink" title="第一步，在资源文件rc中设置对话框的属性"></a><strong>第一步，在资源文件rc中设置对话框的属性</strong></h2><p>Border：None</p><p>Style：Popup</p><h2 id="第二步，导入背景图片到程序资源中"><a href="#第二步，导入背景图片到程序资源中" class="headerlink" title="第二步，导入背景图片到程序资源中"></a><strong>第二步，导入背景图片到程序资源中</strong></h2><p>最好是导入位图，虽然也可以导入其它格式的图片。假设导入位图ID为IDB_BITMAP_BACK。</p><h2 id="第三步，在OnInitialDlg函数中，创建区域，并将其设置为窗口区域"><a href="#第三步，在OnInitialDlg函数中，创建区域，并将其设置为窗口区域" class="headerlink" title="第三步，在OnInitialDlg函数中，创建区域，并将其设置为窗口区域"></a><strong>第三步，在OnInitialDlg函数中，创建区域，并将其设置为窗口区域</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;OnInitDialog()中</span><br><span class="line">CRgn wndRgn;</span><br><span class="line"></span><br><span class="line">m_bitmapBack.LoadBitmap(IDB_BITMAP_BACK);</span><br><span class="line">CreateRgn(m_bitmapBack, RGB(255, 255, 255), wndRgn);</span><br><span class="line">SetWindowRgn(wndRgn, TRUE);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;根据图片创建区域的函数</span><br><span class="line">void CClientBrowserDlg::CreateRgn(CBitmap cBitmap, COLORREF dwColorKey, CRgn wndRgn)  </span><br><span class="line">&#123;  </span><br><span class="line">    CDC *pDC &#x3D; this-&gt;GetDC();  </span><br><span class="line">    CDC memDC;  </span><br><span class="line">    &#x2F;&#x2F;创建与传入DC兼容的临时DC  </span><br><span class="line">    memDC.CreateCompatibleDC(pDC);  </span><br><span class="line"></span><br><span class="line">    CBitmap *pOldMemBmp&#x3D;NULL;  </span><br><span class="line">    &#x2F;&#x2F;将位图选入临时DC  </span><br><span class="line">    pOldMemBmp &#x3D; memDC.SelectObject(cBitmap);  </span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;创建总的窗体区域，初始region为0  </span><br><span class="line">    wndRgn.CreateRectRgn(0,0,0,0);  </span><br><span class="line"></span><br><span class="line">    BITMAP bit;     </span><br><span class="line">    cBitmap.GetBitmap (bit);&#x2F;&#x2F;取得位图参数，这里要用到位图的长和宽       </span><br><span class="line"></span><br><span class="line">    int y;  </span><br><span class="line">    for(y&#x3D;0; y &lt;&#x3D; bit.bmHeight; y++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        CRgn rgnTemp;  </span><br><span class="line">        int iX &#x3D; 0;  </span><br><span class="line">        do  </span><br><span class="line">        &#123;  </span><br><span class="line">            &#x2F;&#x2F;跳过透明色找到下一个非透明色的点.  </span><br><span class="line">            while (iX &lt;&#x3D; bit.bmWidth   memDC.GetPixel(iX, y) &#x3D;&#x3D; dwColorKey)  </span><br><span class="line">                iX++;  </span><br><span class="line">            &#x2F;&#x2F;记住这个起始点  </span><br><span class="line">            int iLeftX &#x3D; iX;  </span><br><span class="line">            &#x2F;&#x2F;寻找下个透明色的点  </span><br><span class="line">            while (iX &lt;&#x3D; bit.bmWidth   memDC.GetPixel(iX, y) !&#x3D; dwColorKey)  </span><br><span class="line">                ++iX;  </span><br><span class="line">            &#x2F;&#x2F;创建一个包含起点与重点间高为1像素的临时“region”  </span><br><span class="line">            rgnTemp.CreateRectRgn(iLeftX, y, iX, y+1);  </span><br><span class="line">            &#x2F;&#x2F;合并到主&quot;region&quot;.  </span><br><span class="line">            wndRgn.CombineRgn(wndRgn, rgnTemp, RGN_OR);  </span><br><span class="line">            &#x2F;&#x2F;删除临时&quot;region&quot;,否则下次创建时和出错  </span><br><span class="line">            rgnTemp.DeleteObject();  </span><br><span class="line">        &#125; while(iX &lt; bit.bmWidth );  </span><br><span class="line">        iX &#x3D; 0;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    if(pOldMemBmp)  </span><br><span class="line">        memDC.SelectObject(pOldMemBmp);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第四步，在OnPaint-绘制窗口背景图片"><a href="#第四步，在OnPaint-绘制窗口背景图片" class="headerlink" title="第四步，在OnPaint()绘制窗口背景图片"></a><strong>第四步，在OnPaint()绘制窗口背景图片</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">void CClientBrowserDlg::OnPaint()</span><br><span class="line">&#123;</span><br><span class="line">    if (IsIconic())</span><br><span class="line">    &#123;</span><br><span class="line">        CPaintDC dc(this); &#x2F;&#x2F; device context for painting</span><br><span class="line"></span><br><span class="line">        SendMessage(WM_ICONERASEBKGND, reinterpret_cast&lt;WPARAM&gt;(dc.GetSafeHdc()), 0);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Center icon in client rectangle</span><br><span class="line">        int cxIcon &#x3D; GetSystemMetrics(SM_CXICON);</span><br><span class="line">        int cyIcon &#x3D; GetSystemMetrics(SM_CYICON);</span><br><span class="line">        CRect rect;</span><br><span class="line">        GetClientRect(rect);</span><br><span class="line">        int x &#x3D; (rect.Width() - cxIcon + 1) &#x2F; 2;</span><br><span class="line">        int y &#x3D; (rect.Height() - cyIcon + 1) &#x2F; 2;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Draw the icon</span><br><span class="line">        dc.DrawIcon(x, y, m_hIcon);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;选入DC  </span><br><span class="line">        CClientDC cdc(this);</span><br><span class="line">        CDC comdc;  </span><br><span class="line">        comdc.CreateCompatibleDC(cdc);  </span><br><span class="line">        comdc.SelectObject(m_bitmapBack);  </span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;生成BITMAP  </span><br><span class="line">        BITMAP bit;  </span><br><span class="line">        m_bitmapBack.GetBitmap(bit);  </span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;客户区域  </span><br><span class="line">        CRect rect;  </span><br><span class="line">        GetClientRect(rect);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;用客户区的DC绘制所生成的BITMAP，并适应为窗口大小  </span><br><span class="line">        cdc.StretchBlt(0,0,rect.Width(),rect.Height(),comdc,0,0,bit.bmWidth,bit.bmHeight,SRCCOPY);</span><br><span class="line"></span><br><span class="line">        CDialog::OnPaint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">## **第五步，点击客户区移动窗口**</span><br><span class="line"></span><br><span class="line">这一点还是有意义的，比如上一篇定制IE浏览器窗口的文章，其外部窗口就是使用这里介绍的不规则窗体。不规则窗体由于是无边框的，因此无法点击边框移动窗口了。因此，设置点击客户端移动是有意义的。而**且窗口的内部区域已经被浏览器控件占据了，只有外部的边界区域可以点击到，因此这样刚好模拟出了点击正常窗口边框的效果。**</span><br><span class="line"></span><br><span class="line">设置客户区可以点击的代码如下：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96; cpp?linenums</span><br><span class="line">LRESULT CClientBrowserDlg::OnNcHitTest(CPoint point)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; TODO: Add your message handler code here and&#x2F;or call default</span><br><span class="line">    &#x2F;&#x2F; 取得鼠标所在的窗口区域</span><br><span class="line">    UINT nHitTest &#x3D; CDialog::OnNcHitTest(point);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 如果鼠标在窗口客户区，则返回标题条代号给Windows</span><br><span class="line">    &#x2F;&#x2F; 使Windows按鼠标在标题条上类进行处理，即可单击移动窗口</span><br><span class="line">    return (nHitTest &#x3D;&#x3D; HTCLIENT) ? HTCAPTION : nHitTest;</span><br><span class="line">    &#x2F;&#x2F;return CDialog::OnNcHitTest(point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇文章定制IE浏览器弹窗中的外部窗口就是一个不规则窗口，这篇文章介绍下其是如何实现的。思路是根据这张图片创建一个不规则区域，然后将窗口的区域设置为该不规则区域。&lt;/p&gt;
&lt;h2 id=&quot;第一步，在资源文件rc中设置对话框的属性&quot;&gt;&lt;a href=&quot;#第一步，在资源文件r
      
    
    </summary>
    
    
      <category term="MFC" scheme="http://xiaopengcheng.top/categories/MFC/"/>
    
    
      <category term="MFC" scheme="http://xiaopengcheng.top/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>使用CWebBrowser2定制IE浏览器窗口</title>
    <link href="http://xiaopengcheng.top/2016/04/21/%E4%BD%BF%E7%94%A8CWebBrowser2%E5%AE%9A%E5%88%B6IE%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AA%97%E5%8F%A3/"/>
    <id>http://xiaopengcheng.top/2016/04/21/%E4%BD%BF%E7%94%A8CWebBrowser2%E5%AE%9A%E5%88%B6IE%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AA%97%E5%8F%A3/</id>
    <published>2016-04-21T13:06:41.000Z</published>
    <updated>2019-12-19T16:22:33.320Z</updated>
    
    <content type="html"><![CDATA[<p>在客户端程序中嵌入浏览器，有两种方式，一种是使用微软的IE控件，一种是使用CEF。这里介绍的是使用CWebBrowser2类（在MFC程序中插入IE的Active控件生成），定制内嵌浏览器窗口的一些经验。</p><p>本文的经验积累于实现逆战退出游戏时候的广告弹窗的过程中，下面Show一下这个自带萌妹子的弹窗吧。</p><p><img src="https://farm2.staticflickr.com/1575/25953542404_086b3470a8_o.png" alt=""></p><p>这是一个无边框的Windows对话框程序，并且是一个基于背景图片的不规则弹窗窗口；内部嵌入了一个浏览器控件窗口，这个漂亮的妹子就是浏览器控件打开的网页显示出来的。对这个妹子有兴趣的，可以去玩一把逆战，退出客户端的时候就会出来这个弹窗了。</p><p>下面介绍一些关于实现该弹窗浏览器的Tips。</p><h2 id="一、如何获得CWebBrowser2"><a href="#一、如何获得CWebBrowser2" class="headerlink" title="一、如何获得CWebBrowser2"></a>一、如何获得CWebBrowser2</h2><p>方法1：网络搜索下载，比如我以前的一篇博文里面有下载链接：vc内嵌浏览器。</p><p>方法2：在MFC程序中插入IE对应的Activex控件，工程中就会生成这个类。</p><p>为了定制浏览器窗口，我继承了该类，自定义了浏览器窗口类CYXBrwser。</p><h2 id="二、让浏览器窗口适应对话框窗口大小"><a href="#二、让浏览器窗口适应对话框窗口大小" class="headerlink" title="二、让浏览器窗口适应对话框窗口大小"></a>二、让浏览器窗口适应对话框窗口大小</h2><p>在对话框类的OnInitDialog()函数中，添加如下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">m_pBrowser = new CYXBrowser(); </span><br><span class="line">RECT rect; </span><br><span class="line">GetClientRect(rect);</span><br><span class="line">rect.left += 8;</span><br><span class="line">rect.right -= 8;</span><br><span class="line">rect.top += 8;</span><br><span class="line">rect.bottom -= 1;</span><br><span class="line">m_pBrowser-&gt;Create(TEXT("NZBrowser"), WS_CHILD | WS_VISIBLE, rect, this, MY_IEBROWSER_ID);</span><br></pre></td></tr></table></figure><p>注意，rect的大小需要调节来获得需要的效果。</p><h2 id="三、屏蔽右键"><a href="#三、屏蔽右键" class="headerlink" title="三、屏蔽右键"></a>三、屏蔽右键</h2><p>有种比较的方法是在PreTranslateMessage中过滤WM_RBUTTONDOWN消息。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//屏蔽右键</span></span><br><span class="line">BOOL CYXBrowser::PreTranslateMessage(MSG* pMsg) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Add your specialized code here and/or call the base class</span></span><br><span class="line">    <span class="keyword">if</span>(WM_RBUTTONDOWN == pMsg-&gt;message)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//AfxMessageBox(_T("Right Menu!"));</span></span><br><span class="line">        return TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    return CWnd::PreTranslateMessage(pMsg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、隐藏网页的滚动条"><a href="#四、隐藏网页的滚动条" class="headerlink" title="四、隐藏网页的滚动条"></a>四、隐藏网页的滚动条</h2><p>这是最难处理的一个地方。不仅仅需要修改程序，而且需要web端的配合。</p><p>第一步：添加DocumentComplete事件响应。在C***Dlg的cpp中添加如下宏：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">BEGIN_EVENTSINK_MAP</span><span class="params">(CClientBrowserDlg, CDialog)</span></span></span><br><span class="line">    ON_EVENT(CClientBrowserDlg, MY_IEBROWSER_ID, DISPID_DOCUMENTCOMPLETE, DocumentComplete, VTS_DISPATCH VTS_PVARIANT)</span><br><span class="line"><span class="function"><span class="title">END_EVENTSINK_MAP</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>注意，CClientBrowserDlg是响应函数所在的类，MY_IEBROWSER_ID是二中指定的浏览器窗口ID。DocumentComplete是CClientBrowserDlg中的响应该事件的成员函数。</p><p>第二步：实现该函数，直接贴代码。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">void CClientBrowserDlg::DocumentComplete(LPDISPATCH pDisp, VARIANT* URL)</span><br><span class="line">&#123;</span><br><span class="line">    UNUSED_ALWAYS(pDisp);</span><br><span class="line">    ASSERT(V_VT(URL) == VT_BSTR);</span><br><span class="line"></span><br><span class="line">    CString str(V_BSTR(URL));</span><br><span class="line">    m_pBrowser-&gt;OnDocumentComplete(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void CYXBrowser::OnDocumentComplete(LPCTSTR lpszURL)</span><br><span class="line">&#123;</span><br><span class="line">    m_bDocumentComplete = true;</span><br><span class="line">    HideScrollBar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void CYXBrowser::HideScrollBar()</span><br><span class="line">&#123;</span><br><span class="line">    HRESULT hr;</span><br><span class="line">    IDispatch *pDisp = GetDocument();</span><br><span class="line">    IHTMLDocument2 *pDocument = NULL;</span><br><span class="line">    IHTMLElement*   pEl;  </span><br><span class="line">    IHTMLBodyElement   *pBodyEl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pDisp)</span><br><span class="line">    &#123;</span><br><span class="line">        hr = pDisp-&gt;QueryInterface(IID_IHTMLDocument2, (void**)pDocument);</span><br><span class="line">        <span class="keyword">if</span> (!SUCCEEDED(hr))</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pDocument  SUCCEEDED(pDocument-&gt;get_body(pEl)))  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(pEl  SUCCEEDED(pEl-&gt;QueryInterface(IID_IHTMLBodyElement, (void**)pBodyEl)))  </span><br><span class="line">        &#123;  </span><br><span class="line">            pBodyEl-&gt;put_scroll(L"no");//去滚动条</span><br><span class="line">        &#125;  </span><br><span class="line">        IHTMLStyle   *phtmlStyle;  </span><br><span class="line">        pEl-&gt;get_style(phtmlStyle);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(phtmlStyle  != NULL)  </span><br><span class="line">        &#123;  </span><br><span class="line">            phtmlStyle-&gt;put_overflow(L"hidden");</span><br><span class="line">            <span class="comment">//需要设置网页源码DOCTYPE为&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span><br><span class="line">            <span class="comment">//去除边框才有效</span></span><br><span class="line">            phtmlStyle-&gt;put_border(L"none");//   去除边框</span><br><span class="line"></span><br><span class="line">            phtmlStyle-&gt;Release();  </span><br><span class="line">            pEl-&gt;Release();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键函数是HideScrollBar()。</p><p>第三步：在浏览器内嵌网页的最前面添加，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span><br></pre></td></tr></table></figure><p>注意，第三步是不可缺少的。</p><h2 id="五、屏蔽多次点击浏览器窗口的提示：”服务器正在运行中”要选择”切换到…”或”重试”的对话框"><a href="#五、屏蔽多次点击浏览器窗口的提示：”服务器正在运行中”要选择”切换到…”或”重试”的对话框" class="headerlink" title="五、屏蔽多次点击浏览器窗口的提示：”服务器正在运行中”要选择”切换到…”或”重试”的对话框**"></a>五、屏蔽多次点击浏览器窗口的提示：”服务器正在运行中”要选择”切换到…”或”重试”的对话框**</h2><p>在CClientBrowserDlg::OnInitDialog()中添加如下代码，</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*屏蔽掉"服务器正在运行中"要选择"切换到..."或"重试"的对话框*/</span></span><br><span class="line">AfxOleGetMessageFilter()-&gt;EnableBusyDialog(FALSE);</span><br><span class="line">AfxOleGetMessageFilter()-&gt;SetBusyReply(SERVERCALL_RETRYLATER);</span><br><span class="line">AfxOleGetMessageFilter()-&gt;EnableNotRespondingDialog(TRUE);</span><br><span class="line">AfxOleGetMessageFilter()-&gt;SetMessagePendingDelay(-1);</span><br></pre></td></tr></table></figure><h2 id="六、点击网页打开系统默认浏览器"><a href="#六、点击网页打开系统默认浏览器" class="headerlink" title="六、点击网页打开系统默认浏览器"></a>六、点击网页打开系统默认浏览器</h2><p>第一步：绑定NEWWINDOW2事件。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">ON_EVENT</span><span class="params">(CClientBrowserDlg, MY_IEBROWSER_ID, DISPID_NEWWINDOW2, OnNewWindow2, VTS_PDISPATCH VTS_PBOOL)</span></span></span><br></pre></td></tr></table></figure><p>第二步：设置该OnNewWindow2的*bCancel为true，并且调用ShellExecute打开网页。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">void CClientBrowserDlg::OnNewWindow2(LPDISPATCH* ppDisp, BOOL* bCancel)</span><br><span class="line">&#123;</span><br><span class="line">    m_pBrowser-&gt;OnNewWindow2(ppDisp, bCancel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void CYXBrowser::OnNewWindow2(LPDISPATCH* ppDisp, BOOL* bCancel)</span><br><span class="line">&#123;</span><br><span class="line">    *bCancel = TRUE;//禁止弹出新窗口（因为会使用IE弹窗）</span><br><span class="line"></span><br><span class="line">    HRESULT hr;</span><br><span class="line">    IDispatch *pDisp = GetDocument();</span><br><span class="line">    IHTMLDocument2 *pHTMLDocument2 = NULL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pDisp)</span><br><span class="line">    &#123;</span><br><span class="line">        hr = pDisp-&gt;QueryInterface(IID_IHTMLDocument2, (void**)pHTMLDocument2);</span><br><span class="line">        <span class="keyword">if</span> (!SUCCEEDED(hr))</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pHTMLDocument2 != NULL)  </span><br><span class="line">    &#123;  </span><br><span class="line">        CComPtr&lt;IHTMLElement&gt; pIHTMLElement;  </span><br><span class="line">        pHTMLDocument2-&gt;get_activeElement(pIHTMLElement);  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pIHTMLElement != NULL)  </span><br><span class="line">        &#123;  </span><br><span class="line">            variant_t url;  </span><br><span class="line">            hr = pIHTMLElement-&gt;getAttribute(L"href", 0, url);  </span><br><span class="line">            <span class="keyword">if</span> (SUCCEEDED(hr))  </span><br><span class="line">            &#123;  </span><br><span class="line">                CString strURL(V_BSTR(url));</span><br><span class="line">                <span class="comment">//打开默认浏览器</span></span><br><span class="line">                ShellExecute(m_hWndOwner, NULL, strURL, NULL, NULL, SW_NORMAL);</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理了六，五也就不需要了，因为点击网页不会再弹出IE浏览器了。</p><h2 id="七、为网页元素的添加事件处理：比如web按钮的点击等"><a href="#七、为网页元素的添加事件处理：比如web按钮的点击等" class="headerlink" title="七、为网页元素的添加事件处理：比如web按钮的点击等"></a>七、为网页元素的添加事件处理：比如web按钮的点击等</h2><p>第一步：继承CCmdTarget新建类CHtmlEventHandle，代码如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#pragma</span> once</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#import</span> &lt;mshtml.tlb&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CHtmlEventHandle command target</span></span><br><span class="line">class CYXBrowser;</span><br><span class="line"></span><br><span class="line">class CHtmlEventHandle : public CCmdTarget</span><br><span class="line">&#123;</span><br><span class="line">    DECLARE_DYNAMIC(CHtmlEventHandle)</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    CHtmlEventHandle();</span><br><span class="line">    virtual ~CHtmlEventHandle();</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    void SetWnd(CWnd* pWnd) &#123; m_pWnd = pWnd;&#125;</span><br><span class="line">    void SetWebBrowser(CYXBrowser* pWebBroswer) &#123; m_pWebBrowser = pWebBroswer; &#125;</span><br><span class="line">    <span class="comment">// 消息处理函数</span></span><br><span class="line">    void OnClick(MSHTML::IHTMLEventObjPtr pEvtObj);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    CWnd* m_pWnd;</span><br><span class="line">    CYXBrowser* m_pWebBrowser;</span><br><span class="line"></span><br><span class="line">protected:</span><br><span class="line">    DECLARE_MESSAGE_MAP()</span><br><span class="line">    DECLARE_DISPATCH_MAP()</span><br><span class="line">    DECLARE_INTERFACE_MAP()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HtmlEventHandle.cpp : implementation file</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#include</span> <span class="string">"stdafx.h"</span></span><br><span class="line"><span class="selector-id">#include</span> <span class="string">"ClientBrowser.h"</span></span><br><span class="line"><span class="selector-id">#include</span> <span class="string">"HtmlEventHandle.h"</span></span><br><span class="line"><span class="selector-id">#include</span> <span class="string">"mshtmdid.h"</span></span><br><span class="line"><span class="selector-id">#include</span> <span class="string">"MsHTML.h"</span></span><br><span class="line"><span class="selector-id">#include</span> <span class="string">"YXBrowser.h"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CHtmlEventHandle</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">IMPLEMENT_DYNAMIC</span><span class="params">(CHtmlEventHandle, CCmdTarget)</span></span></span><br><span class="line"></span><br><span class="line">CHtmlEventHandle::CHtmlEventHandle()</span><br><span class="line">&#123;</span><br><span class="line">    EnableAutomation();  // 重要：激活 IDispatch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CHtmlEventHandle::~CHtmlEventHandle()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">BEGIN_MESSAGE_MAP</span><span class="params">(CHtmlEventHandle, CCmdTarget)</span></span></span><br><span class="line"><span class="function"><span class="title">END_MESSAGE_MAP</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">BEGIN_DISPATCH_MAP</span><span class="params">(CHtmlEventHandle, CCmdTarget)</span></span></span><br><span class="line">    DISP_FUNCTION_ID(CHtmlEventHandle, <span class="string">"HTMLELEMENTEVENTS2_ONCLICK"</span>,</span><br><span class="line">    DISPID_HTMLELEMENTEVENTS2_ONCLICK, OnClick,</span><br><span class="line">    VT_EMPTY, VTS_DISPATCH)</span><br><span class="line"><span class="function"><span class="title">END_DISPATCH_MAP</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">BEGIN_INTERFACE_MAP</span><span class="params">(CHtmlEventHandle, CCmdTarget)</span></span></span><br><span class="line">    INTERFACE_PART(CHtmlEventHandle,</span><br><span class="line">    DIID_HTMLButtonElementEvents2, Dispatch)</span><br><span class="line"><span class="function"><span class="title">END_INTERFACE_MAP</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CHtmlEventHandle message handlers</span></span><br><span class="line"></span><br><span class="line">void CHtmlEventHandle::OnClick(MSHTML::IHTMLEventObjPtr pEvtObj)</span><br><span class="line">&#123;</span><br><span class="line">    MSHTML::IHTMLElementPtr pElement =</span><br><span class="line">        pEvtObj-&gt;GetsrcElement(); // 事件发生的对象元素</span><br><span class="line">    while(pElement) <span class="comment">// 逐层向上检查</span></span><br><span class="line">    &#123;</span><br><span class="line">        _bstr_t strId;</span><br><span class="line">        pElement-&gt;get_id(strId.GetBSTR());</span><br><span class="line">        <span class="keyword">if</span>(_bstr_t(HTML_CLOSE_BUTTON) == strId)<span class="comment">//响应关闭按钮点击</span></span><br><span class="line">        &#123;</span><br><span class="line">            PostQuitMessage(0);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (_bstr_t(HTML_SET_BUTTON) == strId)<span class="comment">//30天不弹出设置</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pElement = pElement-&gt;GetparentElement();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意那几个宏。宏的具体解释我没有去深究，仿照DISP_FUNCTION_ID可以为点击外的其它事件添加处理。</span></span><br></pre></td></tr></table></figure><p>第二步：在CYXBrowser中注册这个web事件处理类。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加成员</span></span><br><span class="line">private:</span><br><span class="line">    void InstallEventHandler();</span><br><span class="line">    void UninstallEventHandler();</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    CHtmlEventHandle *m_pEventHandler;</span><br><span class="line">    DWORD m_dwDocCookie;    // 用于卸载事件响应函数</span><br><span class="line">    IDispatch *m_pDispDoc;  // 用于卸载事件响应函数</span><br><span class="line">    bool m_bDocumentComplete;</span><br><span class="line"></span><br><span class="line"><span class="comment">//相应的函数实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装响应函数。省略了一些失败判断以突出主要步骤</span></span><br><span class="line">void CYXBrowser::InstallEventHandler()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_dwDocCookie)   <span class="comment">// 已安装，卸载先。最后一次安装的才有效</span></span><br><span class="line">        UninstallEventHandler();</span><br><span class="line"></span><br><span class="line">    m_pDispDoc = GetDocument();</span><br><span class="line">    IConnectionPointContainerPtr pCPC = m_pDispDoc;</span><br><span class="line">    IConnectionPointPtr pCP;</span><br><span class="line">    <span class="comment">// 找到安装点</span></span><br><span class="line">    pCPC-&gt;FindConnectionPoint(DIID_HTMLDocumentEvents2, pCP);</span><br><span class="line">    IUnknown* pUnk = m_pEventHandler-&gt;GetInterface(IID_IUnknown);</span><br><span class="line">    <span class="comment">//安装</span></span><br><span class="line">    HRESULT hr = pCP-&gt;Advise(pUnk, m_dwDocCookie);</span><br><span class="line">    <span class="keyword">if</span>(!SUCCEEDED(hr))  <span class="comment">// 安装失败</span></span><br><span class="line">        m_dwDocCookie = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载响应函数。省略了一些失败判断以突出主要步骤</span></span><br><span class="line">void CYXBrowser::UninstallEventHandler()</span><br><span class="line">&#123;</span><br><span class="line">    if(0 == m_dwDocCookie) return;</span><br><span class="line"></span><br><span class="line">    IConnectionPointContainerPtr pCPC = m_pDispDoc;</span><br><span class="line">    IConnectionPointPtr pCP;</span><br><span class="line">    pCPC-&gt;FindConnectionPoint(DIID_HTMLDocumentEvents2, pCP);</span><br><span class="line">    HRESULT hr = pCP-&gt;Unadvise(m_dwDocCookie);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在OnDocumentComplete中安装事件处理</span></span><br><span class="line">CYXBrowser::CYXBrowser()</span><br><span class="line">&#123;</span><br><span class="line">    m_pEventHandler = new CHtmlEventHandle;</span><br><span class="line">    m_pEventHandler-&gt;SetWnd(m_pParent);</span><br><span class="line">    m_pEventHandler-&gt;SetWebBrowser(this);</span><br><span class="line">    m_dwDocCookie = 0;    // 用于卸载事件响应函数</span><br><span class="line">    m_pDispDoc = NULL;  // 用于卸载事件响应函数</span><br><span class="line">    m_bDocumentComplete = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void CYXBrowser::OnDocumentComplete(LPCTSTR lpszURL)</span><br><span class="line">&#123;</span><br><span class="line">    m_bDocumentComplete = true;</span><br><span class="line">    HideScrollBar();</span><br><span class="line">    InstallEventHandler();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在OnBeforeNavigate2和OnDestroy中卸载处理</span></span><br><span class="line"><span class="comment">// 在 BeforeNavigate2 和 Destroy 事件中卸载响应函数</span></span><br><span class="line">void CYXBrowser::OnBeforeNavigate2(LPCTSTR lpszURL, DWORD nFlags,</span><br><span class="line">                                   LPCTSTR lpszTargetFrameName, CByteArray baPostedData,</span><br><span class="line">                                   LPCTSTR lpszHeaders, BOOL* pbCancel)</span><br><span class="line">&#123;</span><br><span class="line">    UninstallEventHandler();</span><br><span class="line">    <span class="comment">// 其他代码...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void CYXBrowser::OnDestroy()</span><br><span class="line">&#123;</span><br><span class="line">    UninstallEventHandler();</span><br><span class="line">    CWebBrowser2::OnDestroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就可以在void CHtmlEventHandle::OnClick(MSHTML::IHTMLEventObjPtr pEvtObj)函数内捕获网页按钮之类的点击了。处理代码的思路是从当前元素开始，不断往上查找父元素，直到匹配的元素ID为止。</p><h2 id="八、判断url是否有效，如果无效则打开资源url，防止Web页面为空"><a href="#八、判断url是否有效，如果无效则打开资源url，防止Web页面为空" class="headerlink" title="八、判断url是否有效，如果无效则打开资源url，防止Web页面为空"></a>八、判断url是否有效，如果无效则打开资源url，防止Web页面为空</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用该函数判断url是否能打开</span></span><br><span class="line">bool CYXBrowser::IsUrlAvailable(CString strUrl)</span><br><span class="line">&#123;</span><br><span class="line">    CInternetSession* session = new CInternetSession(); </span><br><span class="line">    CInternetFile* file = NULL; </span><br><span class="line">    bool bAvailable = true;</span><br><span class="line"></span><br><span class="line">    try</span><br><span class="line">    &#123;</span><br><span class="line">        file = (CInternetFile*)session-&gt;OpenURL(strUrl); </span><br><span class="line">    &#125;</span><br><span class="line">    catch (CInternetException*)</span><br><span class="line">    &#123;</span><br><span class="line">        bAvailable = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    delete session;</span><br><span class="line">    <span class="keyword">if</span> (!file)</span><br><span class="line">    &#123;</span><br><span class="line">        bAvailable = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return bAvailable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在对话框初始化时候，判断外网url是否能打开，如果不能则加载资源内的url</span></span><br><span class="line"><span class="keyword">if</span> (m_pBrowser-&gt;IsUrlAvailable(theApp.m_strUrl))</span><br><span class="line">&#123;</span><br><span class="line">    m_pBrowser-&gt;Navigate2(theApp.m_strUrl);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    TCHAR szModule[MAX_PATH];</span><br><span class="line">    GetModuleFileName(theApp.m_hInstance, szModule, MAX_PATH);</span><br><span class="line">    theApp.m_strUrl.Format(_T("res://%s/%s"), szModule, theApp.m_strLocalUrl);</span><br><span class="line">    m_pBrowser-&gt;Navigate2(theApp.m_strUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意资源url的格式是res://模块名/网页名，因此需要在该程序中导入自定义的资源，并且将其命名为theApp.m_strLocalUrl代表的字符串值，比如”NZ.HTML”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在客户端程序中嵌入浏览器，有两种方式，一种是使用微软的IE控件，一种是使用CEF。这里介绍的是使用CWebBrowser2类（在MFC程序中插入IE的Active控件生成），定制内嵌浏览器窗口的一些经验。&lt;/p&gt;
&lt;p&gt;本文的经验积累于实现逆战退出游戏时候的广告弹窗的过程中
      
    
    </summary>
    
    
      <category term="MFC" scheme="http://xiaopengcheng.top/categories/MFC/"/>
    
    
      <category term="CWebBrowser2" scheme="http://xiaopengcheng.top/tags/CWebBrowser2/"/>
    
  </entry>
  
  <entry>
    <title>三维表面上基于笔画的纹理交互式合成</title>
    <link href="http://xiaopengcheng.top/2016/03/17/%E4%B8%89%E7%BB%B4%E8%A1%A8%E9%9D%A2%E4%B8%8A%E5%9F%BA%E4%BA%8E%E7%AC%94%E7%94%BB%E7%9A%84%E7%BA%B9%E7%90%86%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%90%88%E6%88%90/"/>
    <id>http://xiaopengcheng.top/2016/03/17/%E4%B8%89%E7%BB%B4%E8%A1%A8%E9%9D%A2%E4%B8%8A%E5%9F%BA%E4%BA%8E%E7%AC%94%E7%94%BB%E7%9A%84%E7%BA%B9%E7%90%86%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%90%88%E6%88%90/</id>
    <published>2016-03-17T12:41:27.000Z</published>
    <updated>2019-12-19T17:57:28.518Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的毕业论文题目，两年前的东西了，来出来纪念下吧。后面附演讲pdf。</p><p>这讲的是在一个三维模型上手绘纹理的故事，纹理是用户选择的样本纹理。因此，实际上我的毕业论文就是做了一个上纹理的工具。用户选择不同的模型，同时选择不同的样本纹理（符合马尔科夫随机场的样本纹理），就可以用鼠标在模型上刷三维纹理了。</p><p>看起来挺好玩的，实际上整个系统的实现过程非常繁杂。这个系统主要用了两个算法，一个是扩展指数映射计算笔画的局部参数化，另外一个是根据样本纹理动态合成新的大纹理（要贴到笔画区域），这个用了并行可控制纹理合成算法，在约束条件下做了特殊实现。由于扩展指数映射用的是他人的实现代码，严重影响了整个系统的速度，也影响了我后面做实验的效果，非常恶心，所以不到无奈时候，千万不要用所谓的牛人的资源。</p><p>系统流程：</p><p><img src="https://c2.staticflickr.com/8/7736/27418072966_11479198e3_o.png" alt=""></p><p>最终效果：</p><p><a href="https://c2.staticflickr.com/8/7178/27380808391_b2dabb9474_o.png" target="_blank" rel="noopener"><img src="https://c2.staticflickr.com/8/7178/27380808391_b2dabb9474_o.png" alt=""></a></p><p><a href="https://c2.staticflickr.com/8/7678/26845040783_b243d6bff6_o.png" target="_blank" rel="noopener"><img src="https://c2.staticflickr.com/8/7678/26845040783_b243d6bff6_o.png" alt=""></a></p><p>PDF下载：<a href="https://pan.baidu.com/s/1dDTrBIL" target="_blank" rel="noopener">三维表面上基于笔画的纹理交互式合成</a></p><p>预览如下：</p><iframe src="https://onedrive.live.com/embed?cid=4330CD349D9ADD44&amp;resid=4330CD349D9ADD44%21366&amp;authkey=AIXNiZJrZHuLNX8&amp;em=2&amp;wdStartOn=1" width="800" height="700" frameborder="0" allowfullscreen="allowfullscreen"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是我的毕业论文题目，两年前的东西了，来出来纪念下吧。后面附演讲pdf。&lt;/p&gt;
&lt;p&gt;这讲的是在一个三维模型上手绘纹理的故事，纹理是用户选择的样本纹理。因此，实际上我的毕业论文就是做了一个上纹理的工具。用户选择不同的模型，同时选择不同的样本纹理（符合马尔科夫随机场的样本纹
      
    
    </summary>
    
    
      <category term="图形学" scheme="http://xiaopengcheng.top/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
      <category term="纹理" scheme="http://xiaopengcheng.top/tags/%E7%BA%B9%E7%90%86/"/>
    
      <category term="三维模型处理" scheme="http://xiaopengcheng.top/tags/%E4%B8%89%E7%BB%B4%E6%A8%A1%E5%9E%8B%E5%A4%84%E7%90%86/"/>
    
      <category term="纹理合成" scheme="http://xiaopengcheng.top/tags/%E7%BA%B9%E7%90%86%E5%90%88%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>C/C++编写的程序启动过程</title>
    <link href="http://xiaopengcheng.top/2016/01/16/C%20C++%E7%BC%96%E5%86%99%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://xiaopengcheng.top/2016/01/16/C%20C++%E7%BC%96%E5%86%99%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</id>
    <published>2016-01-16T09:21:46.000Z</published>
    <updated>2019-12-19T16:22:33.150Z</updated>
    
    <content type="html"><![CDATA[<p>记得以前学汇编和PE文件的时候知道，系统不会直接调用我们编写的main，而是调用指定的入口地址。实际上这个入口地址，是在链接时候指定的，MS C/C++中使用链接命令/entry:function可以修改默认设置。</p><p>那么，默认情况下，我们使用VC编写的应用程序使用的是什么入口函数了？</p><table><thead><tr><th>函数</th><th>默认</th></tr></thead><tbody><tr><td><strong>mainCRTStartup</strong> (or <strong>wmainCRTStartup</strong>)</td><td>An application using /SUBSYSTEM:<strong>CONSOLE</strong>; calls <strong>main</strong> (or <strong>wmain</strong>)</td></tr><tr><td><strong>WinMainCRTStartup</strong> (or <strong>wWinMainCRTStartup</strong>)</td><td>An application using /SUBSYSTEM:<strong>WINDOWS</strong>; calls <strong>WinMain</strong> (or <strong>wWinMain</strong>), which must be defined with <strong>__stdcall</strong></td></tr></tbody></table><p>注意，区分入口函数和主函数（main，WinMain）。</p><p>默认情况下，控制台程序使用<strong>mainCRTStartup</strong>作为入口函数，窗口程序使用<strong>WinMainCRTStartup</strong>作为入口函数。同时，这两个函数都有对应的Unicode版本（前缀加w)。</p><p>现在要考虑的是，这些启动函数都做了什么事情？</p><p>在crtexe.c文件中可以找到这几个启动函数的定义，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#ifdef _WINMAIN_</span><br><span class="line"></span><br><span class="line">#ifdef WPRFLAG</span><br><span class="line">int wWinMainCRTStartup(</span><br><span class="line">#else  &#x2F;* WPRFLAG *&#x2F;</span><br><span class="line">int WinMainCRTStartup(</span><br><span class="line">#endif  &#x2F;* WPRFLAG *&#x2F;</span><br><span class="line"></span><br><span class="line">#else  &#x2F;* _WINMAIN_ *&#x2F;</span><br><span class="line"></span><br><span class="line">#ifdef WPRFLAG</span><br><span class="line">int wmainCRTStartup(</span><br><span class="line">#else  &#x2F;* WPRFLAG *&#x2F;</span><br><span class="line">int mainCRTStartup(</span><br><span class="line">#endif  &#x2F;* WPRFLAG *&#x2F;</span><br><span class="line"></span><br><span class="line">#endif  &#x2F;* _WINMAIN_ *&#x2F;</span><br><span class="line">        void</span><br><span class="line">        )</span><br><span class="line">&#123;</span><br><span class="line">        &#x2F;*</span><br><span class="line">         * The &#x2F;GS security cookie must be initialized before any exception</span><br><span class="line">         * handling targetting the current image is registered.  No function</span><br><span class="line">         * using exception handling can be called in the current image until</span><br><span class="line">         * after __security_init_cookie has been called.</span><br><span class="line">         *&#x2F;</span><br><span class="line">        __security_init_cookie();</span><br><span class="line"></span><br><span class="line">        return __tmainCRTStartup();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，实际上是根据平台（Windows或者Console），多字节还是Unicode，生成不同的默认入口函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">__declspec(noinline)</span><br><span class="line">int</span><br><span class="line">__tmainCRTStartup(</span><br><span class="line">         void</span><br><span class="line">         )</span><br><span class="line">&#123;</span><br><span class="line">        int initret;</span><br><span class="line">        int mainret&#x3D;0;</span><br><span class="line">        int managedapp;</span><br><span class="line">#ifdef _WINMAIN_</span><br><span class="line">        _TUCHAR *lpszCommandLine;</span><br><span class="line">        STARTUPINFO StartupInfo;</span><br><span class="line"></span><br><span class="line">        __try &#123;</span><br><span class="line">            &#x2F;*</span><br><span class="line">            Note: MSDN specifically notes that GetStartupInfo returns no error, and throws unspecified SEH if it fails, so</span><br><span class="line">            the very general exception handler below is appropriate</span><br><span class="line">            *&#x2F;</span><br><span class="line">            GetStartupInfo( amp;StartupInfo );</span><br><span class="line">        &#125; __except(EXCEPTION_EXECUTE_HANDLER) &#123;</span><br><span class="line">            return 255;</span><br><span class="line">        &#125;</span><br><span class="line">#endif  &#x2F;* _WINMAIN_ *&#x2F;</span><br><span class="line">        &#x2F;*</span><br><span class="line">         * Determine if this is a managed application</span><br><span class="line">         *&#x2F;</span><br><span class="line">        managedapp &#x3D; check_managed_app();</span><br><span class="line"></span><br><span class="line">        if ( !_heap_init(1) )               &#x2F;* initialize heap *&#x2F;</span><br><span class="line">            fast_error_exit(_RT_HEAPINIT);  &#x2F;* write message and die *&#x2F;</span><br><span class="line"></span><br><span class="line">        if( !_mtinit() )                    &#x2F;* initialize multi-thread *&#x2F;</span><br><span class="line">            fast_error_exit(_RT_THREAD);    &#x2F;* write message and die *&#x2F;</span><br><span class="line"></span><br><span class="line">        &#x2F;* Enable buffer count checking if linking against static lib *&#x2F;</span><br><span class="line">        _CrtSetCheckCount(TRUE);</span><br><span class="line"></span><br><span class="line">        &#x2F;*</span><br><span class="line">         * Initialize the Runtime Checks stuff</span><br><span class="line">         *&#x2F;</span><br><span class="line">#ifdef _RTC</span><br><span class="line">        _RTC_Initialize();</span><br><span class="line">#endif  &#x2F;* _RTC *&#x2F;</span><br><span class="line">        &#x2F;*</span><br><span class="line">         * Guard the remainder of the initialization code and the call</span><br><span class="line">         * to user&#39;s main, or WinMain, function in a __try&#x2F;__except</span><br><span class="line">         * statement.</span><br><span class="line">         *&#x2F;</span><br><span class="line"></span><br><span class="line">        __try &#123;</span><br><span class="line"></span><br><span class="line">            if ( _ioinit() lt; 0 )            &#x2F;* initialize lowio *&#x2F;</span><br><span class="line">                _amsg_exit(_RT_LOWIOINIT);</span><br><span class="line"></span><br><span class="line">            &#x2F;* get wide cmd line info *&#x2F;</span><br><span class="line">            _tcmdln &#x3D; (_TSCHAR *)GetCommandLineT();</span><br><span class="line"></span><br><span class="line">            &#x2F;* get wide environ info *&#x2F;</span><br><span class="line">            _tenvptr &#x3D; (_TSCHAR *)GetEnvironmentStringsT();</span><br><span class="line"></span><br><span class="line">            if ( _tsetargv() lt; 0 )</span><br><span class="line">                _amsg_exit(_RT_SPACEARG);</span><br><span class="line">            if ( _tsetenvp() lt; 0 )</span><br><span class="line">                _amsg_exit(_RT_SPACEENV);</span><br><span class="line"></span><br><span class="line">            initret &#x3D; _cinit(TRUE);                  &#x2F;* do C data initialize *&#x2F;</span><br><span class="line">            if (initret !&#x3D; 0)</span><br><span class="line">                _amsg_exit(initret);</span><br><span class="line"></span><br><span class="line">#ifdef _WINMAIN_</span><br><span class="line"></span><br><span class="line">            lpszCommandLine &#x3D; _twincmdln();</span><br><span class="line">            mainret &#x3D; _tWinMain( (HINSTANCE)amp;__ImageBase,</span><br><span class="line">                                 NULL,</span><br><span class="line">                                 lpszCommandLine,</span><br><span class="line">                                 StartupInfo.dwFlags amp; STARTF_USESHOWWINDOW</span><br><span class="line">                                      ? StartupInfo.wShowWindow</span><br><span class="line">                                      : SW_SHOWDEFAULT</span><br><span class="line">                                );</span><br><span class="line">#else  &#x2F;* _WINMAIN_ *&#x2F;</span><br><span class="line">            _tinitenv &#x3D; _tenviron;</span><br><span class="line">            mainret &#x3D; _tmain(__argc, _targv, _tenviron);</span><br><span class="line">#endif  &#x2F;* _WINMAIN_ *&#x2F;</span><br><span class="line"></span><br><span class="line">            if ( !managedapp )</span><br><span class="line">                exit(mainret);</span><br><span class="line"></span><br><span class="line">            _cexit();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        __except ( _XcptFilter(GetExceptionCode(), GetExceptionInformation()) )</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;*</span><br><span class="line">             * Should never reach here</span><br><span class="line">             *&#x2F;</span><br><span class="line"></span><br><span class="line">            mainret &#x3D; GetExceptionCode();</span><br><span class="line"></span><br><span class="line">            if ( !managedapp )</span><br><span class="line">                _exit(mainret);</span><br><span class="line"></span><br><span class="line">            _c_exit();</span><br><span class="line"></span><br><span class="line">        &#125; &#x2F;* end of try - except *&#x2F;</span><br><span class="line"></span><br><span class="line">        return mainret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码，可以很清晰了解启动函数到底做了什么事情。</p><p>Console版本</p><p>1.初始化C的堆申请（_heap_init(1)）</p><p>2.初始化多线程（_mtinit()）</p><p>3.获取命令行（GetCommandLineT()）</p><p>4.获取环境变量（GetEnvironmentStringsT()）</p><p>5.初始化C和C++的全局变量（_cinit(TRUE)）</p><p>6.调用main函数（_tmain(__argc, _targv, _tenviron)）</p><p>Windows版本</p><p>1.获取StartupInfo（GetStartupInfo( StartupInfo )）</p><p>2.初始化C的堆申请（_heap_init(1)）</p><p>3.初始化多线程（_mtinit()）</p><p>4.获取命令行（GetCommandLineT()）</p><p>5.获取环境变量（GetEnvironmentStringsT()）</p><p>6.初始化C和C++的全局变量（_cinit(TRUE)）</p><p>7.调用WinMain函数</p><p>最后再看看_cinit(TRUE)到底做了什么事情？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl _cinit (</span><br><span class="line">        int initFloatingPrecision</span><br><span class="line">        )</span><br><span class="line">&#123;</span><br><span class="line">        int initret;</span><br><span class="line"></span><br><span class="line">        &#x2F;*</span><br><span class="line">         * initialize floating point package, if present</span><br><span class="line">         *&#x2F;</span><br><span class="line">#ifdef CRTDLL</span><br><span class="line">        _fpmath(initFloatingPrecision);</span><br><span class="line">#else  &#x2F;* CRTDLL *&#x2F;</span><br><span class="line">        if (_FPinit !&#x3D; NULL amp;amp;</span><br><span class="line">            _IsNonwritableInCurrentImage((PBYTE)amp;_FPinit))</span><br><span class="line">        &#123;</span><br><span class="line">            (*_FPinit)(initFloatingPrecision);</span><br><span class="line">        &#125;</span><br><span class="line">        _initp_misc_cfltcvt_tab();</span><br><span class="line">#endif  &#x2F;* CRTDLL *&#x2F;</span><br><span class="line"></span><br><span class="line">        &#x2F;*</span><br><span class="line">         * do initializations</span><br><span class="line">         *&#x2F;</span><br><span class="line">        initret &#x3D; _initterm_e( __xi_a, __xi_z );</span><br><span class="line">        if ( initret !&#x3D; 0 )</span><br><span class="line">            return initret;</span><br><span class="line"></span><br><span class="line">#ifdef _RTC</span><br><span class="line">        atexit(_RTC_Terminate);</span><br><span class="line">#endif  &#x2F;* _RTC *&#x2F;</span><br><span class="line">        &#x2F;*</span><br><span class="line">         * do C++ initializations</span><br><span class="line">         *&#x2F;</span><br><span class="line">        _initterm( __xc_a, __xc_z );</span><br><span class="line"></span><br><span class="line">#ifndef CRTDLL</span><br><span class="line">        &#x2F;*</span><br><span class="line">         * If we have any dynamically initialized __declspec(thread)</span><br><span class="line">         * variables, then invoke their initialization for the thread on</span><br><span class="line">         * which the DLL is being loaded, by calling __dyn_tls_init through</span><br><span class="line">         * a callback defined in tlsdyn.obj.  We can&#39;t rely on the OS</span><br><span class="line">         * calling __dyn_tls_init with DLL_PROCESS_ATTACH because, on</span><br><span class="line">         * Win2K3 and before, that call happens before the CRT is</span><br><span class="line">         * initialized.</span><br><span class="line">         *&#x2F;</span><br><span class="line">        if (__dyn_tls_init_callback !&#x3D; NULL amp;amp;</span><br><span class="line">            _IsNonwritableInCurrentImage((PBYTE)amp;__dyn_tls_init_callback))</span><br><span class="line">        &#123;</span><br><span class="line">            __dyn_tls_init_callback(NULL, DLL_THREAD_ATTACH, NULL);</span><br><span class="line">        &#125;</span><br><span class="line">#endif  &#x2F;* CRTDLL *&#x2F;</span><br><span class="line"></span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最重要的两行，initret = _initterm_e( __xi_a, __xi_z )和_initterm( __xc_a, __xc_z )。这两行的作用分别是初始化C标准库中的全局变量和初始化C++的全局变量。</p><p>至此，对C++程序的默认启动函数的基本过程有个了解了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记得以前学汇编和PE文件的时候知道，系统不会直接调用我们编写的main，而是调用指定的入口地址。实际上这个入口地址，是在链接时候指定的，MS C/C++中使用链接命令/entry:function可以修改默认设置。&lt;/p&gt;
&lt;p&gt;那么，默认情况下，我们使用VC编写的应用程序
      
    
    </summary>
    
    
      <category term="C/C++" scheme="http://xiaopengcheng.top/categories/C-C/"/>
    
    
      <category term="程序启动" scheme="http://xiaopengcheng.top/tags/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>书籍推荐列表</title>
    <link href="http://xiaopengcheng.top/2016/01/11/%E4%B9%A6%E7%B1%8D%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/"/>
    <id>http://xiaopengcheng.top/2016/01/11/%E4%B9%A6%E7%B1%8D%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/</id>
    <published>2016-01-11T05:40:28.000Z</published>
    <updated>2019-12-19T16:22:33.317Z</updated>
    
    <content type="html"><![CDATA[<p>突然想想说说看过的一些书籍。当然只会提看过之后觉得很不错的，或者很有收获的。看过的21天系列、精通系列的就不提了。有些手册或者教程类的书籍也不提了。</p><p>IT类：</p><p><strong>C++ primer 4/5</strong> （我C++是看4入门的，5大致浏览过，觉得也很不错）</p><p><strong>STL源码剖析</strong> （没看过这本，怎么能说知道STL，另外看完之后很多模板的奇淫巧计都能懂下）</p><p>深入探索C++对象模型 （这本书很底层，但是不看不行）</p><p>Effective C++/more Effective C++ （这两本书我曾经看过两遍，看的时候觉得很有收获，但是现在记得不多）</p><p><strong>算法导论</strong></p><p><strong>Windows核心编程</strong></p><p>深入浅出MFC （不推荐用MFC做界面了，推荐QT，QT不用推荐什么书了）</p><p>OpenGL编程指南/OpenGL超级宝典 （这两本Ogl的书都不错，入门都可以）</p><p>游戏引擎架构（去年底看过一遍，现在什么都不记得了）</p><p>Http权威指南 （互联网时代的人不懂Http协议太悲哀了）</p><p>程序员的自我修养 链接、装载与库</p><p>非IT类：</p><p><strong>把时间当作朋友</strong></p><p><strong>如何阅读一本书</strong></p><p>当然还有很多好书，还有很多我看过一遍或者两遍，但是我一知半解或者感触不深的书，就不推荐了。上面的一些书我也并没有看完，只是决心看完。有些书看过好几遍都没那么明白，有些书看了好几遍有些难的部分都没去看。</p><p>这篇文章我会持续更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;突然想想说说看过的一些书籍。当然只会提看过之后觉得很不错的，或者很有收获的。看过的21天系列、精通系列的就不提了。有些手册或者教程类的书籍也不提了。&lt;/p&gt;
&lt;p&gt;IT类：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C++ primer 4/5&lt;/strong&gt; （我C++是看4入门的
      
    
    </summary>
    
    
      <category term="生活" scheme="http://xiaopengcheng.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="推荐" scheme="http://xiaopengcheng.top/tags/%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>再见2015</title>
    <link href="http://xiaopengcheng.top/2016/01/05/%E5%86%8D%E8%A7%812015/"/>
    <id>http://xiaopengcheng.top/2016/01/05/%E5%86%8D%E8%A7%812015/</id>
    <published>2016-01-05T06:07:14.000Z</published>
    <updated>2019-12-19T16:22:33.338Z</updated>
    
    <content type="html"><![CDATA[<p>时间过得真快。一恍惚，就是一年了。生命中太多的无奈。</p><p>有一个笑话，说的是小时候都会考虑考清华还是考北大。其实，除了考清华还是考北大，还有更多的笑话。很多时候真的觉得好无奈，真的是无可奈何。虽然能够知耻而后勇，但我终究不是诸葛，能够力挽狂澜。我终究是一个普普通通的人。我是尘世中的一个小书童，华安，潜入华府就是为了秋香姐你。</p><p>我那天真而又卑微的学生生涯真的是结束了，只是半年来我没有意识到。虽然公司生活，对于我这样的宅男，跟学校差别不大，无非是实验室换成公司，而且公司还发工资，食堂更好。但是，我那简简单单对未来幻想的生活结束了。小时候，想着长大了要怎么样。高中时候，想着读大学要怎么样。上大学时候，想着未来自己多么牛逼，进入大公司。结果，一不小心读了研究生。读研时候，想着未来多么美好。结果，世事难料，美好的后面是更长时间的煎熬，一旦记住了需要花费更多的时间忘记，一旦认真了就会继续认真下去，这就是我一直来的方式。不是不想忘记，不是不想重新开始，只是抬头一看发现满目狼藉。花非花，雾非雾。</p><p>我终究是要面对的。面对漫长孤独的岁月，面对现实跟理想巨大的差距，面对坚持跟欲望的斗争。虽然，很多小小的愿望也做不到，曾经我只是想当一个小小的书童。</p><p>但是，我终于发现我也是可以去看看世界的。我没有那么不堪，没有那么懦弱，也不需要也不用勉强任何人。我有强壮的体魄，聪明的大脑，有一份可以以之为基础努力得工作。人生这么长，我可以做很多事情。世界这么大，即使不出门，我也可以通过不断读书见识不同的世界，感受不同的观点、思想。即使我再穷困潦倒，我照样可以健健康康身强体壮地享受生活。毕竟，这半年来，我又肥了不少，每天爬楼梯，从地铁口快走小跑来公司，晚上回家之后再运动锻炼下。经常看小说到2点，8点多又起来去公司，中午不睡觉，晚上9点多才回去，每天吃好多，我都不好意思说下去了。我这糜烂的生活，精力过剩了。</p><p>我希望把2016具体化，2015年最后一个月我这样尝试了，确实做了一些事情。人生这么漫长，总得做些有意义的事情。难道我只能是一个孤独无聊的程序员吗。不是的，我也有自己喜欢的事情，只是因为各种借口没去做而已。这一年我会把深圳能爬的山都爬了，能看的户外风景都看了，一个人也可以去的。我会读尽可能多的书，让自己变得有趣有广度起来。</p><p>有些事情明白地太晚，付出的代价太高，逃避的时间太长了。突然有一天明白了，已经不知道该怎么后悔了，该不该痛哭流涕，还是皱皱眉头、心酸一下，还是无奈笑笑。我会永远记住不会再抱怨任何事情，不会再让任何愤怒、绝望、怨恨占据我的内心。即使别人怎么对我，即使多么不甘心，多么想不通，多么不明白，我也不会愤怒，我也不会怨恨。有些事情确实是突然明白了，多少个不眠夜的思考，多少个想不通。我当时真的不懂，即使没被愤怒占据内心，也没那么懂。我也不知道为什么突然就懂了，只是懂了又如何，已经没有机会了，连最后的机会都没给我，一声不吭地就决定了。我还是恨。恨我自己不懂，恨自己放弃，恨自己天真。我真的可以释怀了，所有我执念过的人，是我不懂你们而已。</p><p>感谢与时间做朋友一书。让我想明白了很多一直想不明白的事情。我要是早知道多读几本书该多好啊。我终于找到理由可以静下心了。我想我该有另外一种人生。再见了，曾经不堪的我。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时间过得真快。一恍惚，就是一年了。生命中太多的无奈。&lt;/p&gt;
&lt;p&gt;有一个笑话，说的是小时候都会考虑考清华还是考北大。其实，除了考清华还是考北大，还有更多的笑话。很多时候真的觉得好无奈，真的是无可奈何。虽然能够知耻而后勇，但我终究不是诸葛，能够力挽狂澜。我终究是一个普普通通
      
    
    </summary>
    
    
      <category term="生活" scheme="http://xiaopengcheng.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="随想" scheme="http://xiaopengcheng.top/categories/%E7%94%9F%E6%B4%BB/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>软件推荐列表</title>
    <link href="http://xiaopengcheng.top/2015/12/18/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/"/>
    <id>http://xiaopengcheng.top/2015/12/18/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/</id>
    <published>2015-12-18T07:22:59.000Z</published>
    <updated>2019-12-19T16:22:33.355Z</updated>
    
    <content type="html"><![CDATA[<p>1.发布博客软件：Windows Live Write，可以参考<a href="http://www.xpc-yx.com/2015/11/25/%E8%AF%95%E8%AF%95windows-live-write%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">我的WindowsLiveWrite博文</a>。</p><p>2.Windows7/Xp上显示TGA图片的缩略图：MysticThumbs，可以参考<a href="http://www.xpc-yx.com/2015/10/12/%E5%A6%82%E4%BD%95%E8%AE%A9tga%E6%A0%BC%E5%BC%8F%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E7%BC%A9%E7%95%A5%E5%9B%BE/" target="_blank" rel="noopener">我的MysticThumbs博文</a>。</p><p>3.记笔记：印象笔记（Evernote），不用介绍了，任何设备上都可以用（电脑，手机，ipad…)。</p><p>4.注册表浏览器：registryworkshop，比Windows默认的注册表舒服很多。</p><p>5.破解工具：<strong>TrialReset。</strong>该软件可以清除很多软件的保护信息，比如visual assist X，我就用它清楚过VA的保护信息。搜索该软件会得到一些介绍，单纯的清除信息操作很简单，清除后相当于<strong>无限延长试用期</strong>。试试会得到你意想不到的结果。</p><p>6.阅读软件：<strong>calibre</strong>。calibre是一个非常优秀的书籍管理软件。当然，我找到它的原因是它可以非常方便的转mobi,epub等。这样就可以将任意格式的书籍放到kindle或者多看阅读器（支持多种设备，手机，ipad，kindle等）上面去看了。这对于用阅读打法无聊时光的我，非常有用。calibre还可以在PC上当做书籍管理和阅读软件，我正在用它看epub格式的书籍了，因为多看阅读器不支持Windows平台。更多功能我就不知道了，有待挖掘。</p><p>7.文件内容搜索工具：<strong>FileSeek</strong>。这款软件能够下载到破解版，我现在主要用来搜索as代码（逆战的界面使用的是ScaleForm开发的，需要写as代码）。Windows自带的搜索功能对于文件内容搜索确实不方便额。</p><p>持续更新…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.发布博客软件：Windows Live Write，可以参考&lt;a href=&quot;http://www.xpc-yx.com/2015/11/25/%E8%AF%95%E8%AF%95windows-live-write%E5%8F%91%E5%B8%83%E5%8D%9A
      
    
    </summary>
    
    
      <category term="生活" scheme="http://xiaopengcheng.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="推荐" scheme="http://xiaopengcheng.top/tags/%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>有感</title>
    <link href="http://xiaopengcheng.top/2015/11/30/%E6%9C%89%E6%84%9F/"/>
    <id>http://xiaopengcheng.top/2015/11/30/%E6%9C%89%E6%84%9F/</id>
    <published>2015-11-30T13:28:20.000Z</published>
    <updated>2019-12-19T16:22:33.349Z</updated>
    
    <content type="html"><![CDATA[<p>今天搜东西乱入一同学博客，以前也搜到过。看了下about和简历，以及他在thu的一些事情。感慨万千。作为同一届中南的本科生，我在信息学院，他在软院，才没有认识这位大神。他是学霸，拿到了保研资格，去了清华。本科就去了腾讯实习，参加过不少比赛。这些虽然都只是光环。但是，再看看这家伙居然去贵州支教了，我曾只是动过这个念头。他在本科生时候封装过飞信做了web版的东西，另外各种旅游等等。</p><p>不用多说了。谨以此文纪念我逝去七年的所谓象牙塔生涯。被狗吃掉的岁月。</p><p>虽然看最终的结果，仅以毕业第一份工作，我并不一定比他差，或者差多少。我也不讨论以后谁差谁好，这根本不是意义的所在。我真心觉得他过的才是人生，才是青春，才是岁月。</p><p>作为一个高考loser，没人敢说没憧憬过清华，而我在高考失败后就彻底不想读书了。所以，我只是把找工作当做借口。所以，多年来我只学会了码代码，二流的码农一枚。我丢掉了太多太多的东西，很多本来有机会去实现的东西。很多很多事情，比如我曾经也想去支教，不是为了献爱心，我很清楚，我改变不了社会现状。我曾经也想过成为一名黑客，但是我现在只是一名码农，会点c++，懂点图形。我曾经也想做属于自己的游戏，虽然我现在在timi，在做逆战相关的游戏系统功能，但是我并没有尝试过开发一个属于自己的游戏demo。我曾经也想骑自行车去大江南北，但是种种借口，我去过最远的地方也就300多公里。</p><p>真想说青春被狗吃了。我浪费太多的时间太多的生命踌躇，生命就是在犹豫做不做和怀疑自己能不能做好的时候流逝的。一直以来并没有足够的自信，给过自己太多的限制，认为很多事情不可能，或者难以做到。诚然，很多事情无法改变。比如，过去改变不了，逝去的光阴无法追寻，变掉的心无法留恋，装睡的人无法感动。但是，未来是可以改变的，即使未来是已经设定好的，也可以尽最大努力扰动的。即使最后的结果一样，走不一样的路，有不一样的精彩经历，得到过，体验过，那也是不一样的人生。那才是活着的味道。这么多年我就这么错过了。再也不要把希望寄托在那些虚无上面，没有不离开的人，没有无缘无故的爱，也没有无缘无故的恨。我不是冷静不了，我不是有点悲观，我不是忘记不了，相反我早已忘记。我怀恋的只是那一份承诺，我以为错的是人，结果发现错的是事。谁也没有错。只是我不再用那么傻傻地去对待很多事情了。</p><p>不管是今天，还是明天，都应该让青春最精彩的绽放，不是吗。再也不能让青春被狗吃了。感谢terry劝我多去运动。入职三个多月，谨以此文纪念。我将重拾自己的梦想，不再做一个无趣的人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天搜东西乱入一同学博客，以前也搜到过。看了下about和简历，以及他在thu的一些事情。感慨万千。作为同一届中南的本科生，我在信息学院，他在软院，才没有认识这位大神。他是学霸，拿到了保研资格，去了清华。本科就去了腾讯实习，参加过不少比赛。这些虽然都只是光环。但是，再看看这
      
    
    </summary>
    
    
      <category term="生活" scheme="http://xiaopengcheng.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="随想" scheme="http://xiaopengcheng.top/categories/%E7%94%9F%E6%B4%BB/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>CTex下如何使Beamer支持中文</title>
    <link href="http://xiaopengcheng.top/2015/11/28/CTex%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BD%BFBeamer%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87/"/>
    <id>http://xiaopengcheng.top/2015/11/28/CTex%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BD%BFBeamer%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87/</id>
    <published>2015-11-28T11:17:05.000Z</published>
    <updated>2019-12-19T16:22:33.195Z</updated>
    
    <content type="html"><![CDATA[<p>我使用的是windows下的最新版CTex，版本号是CTeX_2.9.2.164_Full.exe。注意使用full版本，如果不是，可能不支持beamer。beamer是一个流行的演讲文档模板，有多种主题，效果也还不错。</p><p>我在尝试beamer的过程中，发现网上大部分例子都不支持中文，或者不支持我使用的环境下的中文，即windows下的最新版CTex。折腾了几天，试了很多个模板，发现xeCJK能够完美解决这个问题，因为很多老的模板都是用的CJK，我将其中一个模板改成xeCJK就支持中文了。<br> 下面给出这个模板的设置。  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;beamer&#125;</span><br><span class="line">\usetheme&#123;Warsaw&#125;</span><br><span class="line">\usepackage&#123;fontspec,xunicode,xltxtra&#125;</span><br><span class="line">\usepackage[slantfont,boldfont]&#123;xeCJK&#125; % 允许斜体和粗体</span><br><span class="line">\setbeamercovered&#123;transparent&#125;</span><br><span class="line">\usepackage[english]&#123;babel&#125;</span><br><span class="line">% or whatever</span><br><span class="line">\usepackage&#123;hyperref&#125;</span><br><span class="line">\usepackage[T1]&#123;fontenc&#125;</span><br><span class="line">% or whatever</span><br><span class="line">\usefonttheme&#123;professionalfonts&#125;</span><br><span class="line">\usepackage&#123;times&#125;</span><br><span class="line">\usepackage&#123;mathptmx&#125;</span><br><span class="line">\usepackage&#123;tabularx&#125;</span><br><span class="line">% Or whatever. Note that the encoding and the font should match. If T1</span><br><span class="line">% does not look nice, try deleting the line with the fontenc.</span><br><span class="line">\usepackage&#123;xcolor&#125;</span><br><span class="line">\usepackage&#123;booktabs, multirow, enumerate&#125;</span><br><span class="line">\usepackage&#123;animate&#125;</span><br><span class="line">\usepackage&#123;multimedia&#125;</span><br><span class="line"></span><br><span class="line">% ... or whatever. Note that the encoding and the font should match.</span><br><span class="line">% If T1 does not look nice, try deleting the line with the fontenc.</span><br><span class="line">\usepackage&#123;lmodern&#125; %optional</span><br><span class="line">\usepackage&#123;listings&#125;</span><br><span class="line"></span><br><span class="line">% Delete this, if you do not want the table of contents to pop up at</span><br><span class="line">% the beginning of each subsection:</span><br><span class="line">\AtBeginSection[]</span><br><span class="line">&#123;</span><br><span class="line">    \begin&#123;frame&#125;&lt;beamer&gt;</span><br><span class="line">        \frametitle&#123;内容大纲&#125;</span><br><span class="line">        \tableofcontents[currentsection]</span><br><span class="line">    \end&#123;frame&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">\setCJKmainfont&#123;Microsoft YaHei&#125;   % 设置缺省中文字体</span><br><span class="line">\setCJKmonofont&#123;SimSun&#125;   % 设置等宽字体</span><br><span class="line">\setmainfont&#123;TeX Gyre Pagella&#125; % 英文衬线字体</span><br><span class="line">\setmonofont&#123;Microsoft YaHei&#125; % 英文等宽字体</span><br><span class="line">\setsansfont&#123;Trebuchet MS&#125; % 英文无衬线字体</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\title[***纹理***]% optional, use only with long paper titles</span><br><span class="line">&#123; ***纹理***\\[<span class="number">2ex</span>]&#125;</span><br><span class="line"></span><br><span class="line">%\subtitle[malloc] %optional</span><br><span class="line">%&#123;malloc\ 实现&#125;</span><br><span class="line"></span><br><span class="line">\author[yx] % optional, use only with lots of authors</span><br><span class="line">&#123;</span><br><span class="line">\textcolor[rgb]&#123;<span class="number">0.00</span>, <span class="number">0.41</span>, <span class="number">0.66</span>&#125;&#123;yx&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">% the titlepage</span><br><span class="line">% the plain option removes the sidebar and header from the title page</span><br><span class="line">\begin&#123;frame&#125;[plain]</span><br><span class="line">  \titlepage</span><br><span class="line">\end&#123;frame&#125;</span><br><span class="line">%%%%%%%%%%%%%%%%</span><br><span class="line"></span><br><span class="line">\begin&#123;frame&#125;</span><br><span class="line">        \frametitle&#123;内容大纲&#125;</span><br><span class="line">        \tableofcontents</span><br><span class="line">\end&#123;frame&#125;</span><br><span class="line"></span><br><span class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">\section&#123;研究背景和意义&#125;</span><br><span class="line">%%%%%%%%%%%%%%%%</span><br><span class="line">\begin&#123;frame&#125;&#123;纹理的作用&#125;&#123;&#125;</span><br><span class="line">  \begin&#123;block&#125;&lt;<span class="number">1</span>-&gt;&#123;&#125;</span><br><span class="line">    纹理是图形学中增强真实性的重要手段。</span><br><span class="line">  \end&#123;block&#125;</span><br><span class="line">  \begin&#123;block&#125;&lt;<span class="number">2</span>-&gt;&#123;&#125;</span><br><span class="line">    应用纹理到三维表面能够有效的表示物体表面的颜色，材质，几何等属性。</span><br><span class="line">  \end&#123;block&#125;</span><br><span class="line">\end&#123;frame&#125;</span><br><span class="line">%%%%%%%%%%%%%%%%</span><br><span class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是，请用utf8来保存该文档，并且在WinEdit中用utf8来打开，否则还是可能看到乱码的。<br>boats against the current, borne back ceaselessly into the past.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我使用的是windows下的最新版CTex，版本号是CTeX_2.9.2.164_Full.exe。注意使用full版本，如果不是，可能不支持beamer。beamer是一个流行的演讲文档模板，有多种主题，效果也还不错。&lt;/p&gt;
&lt;p&gt;我在尝试beamer的过程中，发现网上
      
    
    </summary>
    
    
      <category term="生活" scheme="http://xiaopengcheng.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="CTex" scheme="http://xiaopengcheng.top/tags/CTex/"/>
    
  </entry>
  
  <entry>
    <title>试试windows live write发布博客</title>
    <link href="http://xiaopengcheng.top/2015/11/25/%E8%AF%95%E8%AF%95windows%20live%20write%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/"/>
    <id>http://xiaopengcheng.top/2015/11/25/%E8%AF%95%E8%AF%95windows%20live%20write%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/</id>
    <published>2015-11-25T12:02:00.000Z</published>
    <updated>2019-12-19T16:22:33.354Z</updated>
    
    <content type="html"><![CDATA[<p>我是研一时候正式从cppblog上面赚到wordpress搭建的独立博客上面的。这三年来一直忍受着wordpress日志编辑器的不人性化。这篇博客是我第一次尝试用windows live write发布博客的，姑且看看效果吧。<br>文字版的还不错啊，自动有段落的效果了。再试试图片吧。点击右侧插入下面的图片就可以了。<br>感觉也挺方便的，选中图片后，在右侧可以设置图片的格式。</p><p>再试试超链接吧，我是参照这篇文章设置的windows live write，其实过程很简单，<a href="http://wangbaiyuan.cn/using-windows-live-writer-write-wordpress-offline-logs.html#prettyPhoto" target="_blank" rel="noopener">用Windows Live Writer离线写WordPress日志</a>。</p><p>右侧还可以插入相册，既然没有相册那就算了。试试插入表格吧。</p><table><thead><tr><th>1列</th><th>2列</th></tr></thead><tbody><tr><td>插入表格也很方便额</td><td>为啥不早点用这个工具了，蹉跎人生啊。</td></tr></tbody></table><p>另外还有个标签选项，也试试吧。<br>Technorati 标签: <a href="http://technorati.com/tags/Wordpress" target="_blank" rel="tag noopener">Wordpress</a>,<a href="http://technorati.com/tags/Windows+live+write" target="_blank" rel="tag noopener">Windows live write</a></p><p>再来个地图试试。<br><img src="https://c3.staticflickr.com/8/7254/26842910074_17470135e5_o.jpg" alt=""></p><p>插入地图有点慢额，估计也是公司办公网的原因。地址是我上班的地方。</p><p>最后还有个添加插件，以后有空再研究吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我是研一时候正式从cppblog上面赚到wordpress搭建的独立博客上面的。这三年来一直忍受着wordpress日志编辑器的不人性化。这篇博客是我第一次尝试用windows live write发布博客的，姑且看看效果吧。&lt;br&gt;文字版的还不错啊，自动有段落的效果了。再
      
    
    </summary>
    
    
      <category term="生活" scheme="http://xiaopengcheng.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>第一次看到自己的代码上线了</title>
    <link href="http://xiaopengcheng.top/2015/10/28/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9C%8B%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B8%8A%E7%BA%BF%E4%BA%86/"/>
    <id>http://xiaopengcheng.top/2015/10/28/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9C%8B%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B8%8A%E7%BA%BF%E4%BA%86/</id>
    <published>2015-10-28T13:19:24.000Z</published>
    <updated>2019-12-19T16:22:33.351Z</updated>
    
    <content type="html"><![CDATA[<p>今天逆战发布新版了。我做的新军衔系统和转生系统在这次上线了。哈哈，好有成就感。第一次写的代码能够影响这么多人的生活。听说玩家都挤在主城转生NPC处了。</p><p>新军衔系统：</p><p><a href="https://c7.staticflickr.com/8/7669/27417989086_57309c8dcd_o.jpg" target="_blank" rel="noopener"><img src="https://c7.staticflickr.com/8/7669/27417989086_57309c8dcd_o.jpg" alt=""></a></p><p><img src="https://c2.staticflickr.com/8/7029/27175748990_4be24a9ea9_o.png" alt=""></p><p>转生系统：</p><p><img src="https://c2.staticflickr.com/8/7286/27380691921_3e234978a3_o.jpg" alt=""></p><p><img src="https://c7.staticflickr.com/8/7197/27352974822_d54441d79d_o.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天逆战发布新版了。我做的新军衔系统和转生系统在这次上线了。哈哈，好有成就感。第一次写的代码能够影响这么多人的生活。听说玩家都挤在主城转生NPC处了。&lt;/p&gt;
&lt;p&gt;新军衔系统：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://c7.staticflickr.com/8/7
      
    
    </summary>
    
    
      <category term="生活" scheme="http://xiaopengcheng.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
</feed>
